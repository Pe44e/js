// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Options as ClientOptions,
  TDataShape,
} from "@hey-api/client-fetch";
import { client as _heyApiClient } from "./client.gen.js";
import type {
  ChatChatPostData,
  ChatChatPostError,
  ChatChatPostResponse,
  ChatCompletionsChatCompletionsPostData,
  ChatCompletionsChatCompletionsPostError,
  ChatCompletionsChatCompletionsPostResponse,
  ClearSessionSessionSessionIdClearPostData,
  ClearSessionSessionSessionIdClearPostError,
  ClearSessionSessionSessionIdClearPostResponse,
  CreateAgentAgentPostData,
  CreateAgentAgentPostError,
  CreateAgentAgentPostResponse,
  CreateAgentToolAgentAgentIdToolPostData,
  CreateAgentToolAgentAgentIdToolPostError,
  CreateAgentToolAgentAgentIdToolPostResponse,
  CreateAgentTriggerAgentAgentIdTriggerPostData,
  CreateAgentTriggerAgentAgentIdTriggerPostError,
  CreateAgentTriggerAgentAgentIdTriggerPostResponse,
  CreateConversationConversationPostData,
  CreateConversationConversationPostError,
  CreateConversationConversationPostResponse,
  CreateConversationMessageConversationConversationIdMessagePostData,
  CreateConversationMessageConversationConversationIdMessagePostError,
  CreateConversationMessageConversationConversationIdMessagePostResponse,
  CreateSessionSessionPostData,
  CreateSessionSessionPostError,
  CreateSessionSessionPostResponse,
  DeleteAgentAgentAgentIdDeleteData,
  DeleteAgentAgentAgentIdDeleteError,
  DeleteAgentAgentAgentIdDeleteResponse,
  DeleteAgentToolAgentAgentIdToolToolIdDeleteData,
  DeleteAgentToolAgentAgentIdToolToolIdDeleteError,
  DeleteAgentToolAgentAgentIdToolToolIdDeleteResponse,
  DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteData,
  DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteError,
  DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteResponse,
  DeleteConversationConversationConversationIdDeleteData,
  DeleteConversationConversationConversationIdDeleteError,
  DeleteConversationConversationConversationIdDeleteResponse,
  DeleteSessionSessionSessionIdDeleteData,
  DeleteSessionSessionSessionIdDeleteError,
  DeleteSessionSessionSessionIdDeleteResponse,
  DeleteUserWalletUserWalletWalletIdDeleteData,
  DeleteUserWalletUserWalletWalletIdDeleteError,
  ExecuteExecutePostData,
  ExecuteExecutePostError,
  ExecuteExecutePostResponse,
  FeedbackFeedbackPostData,
  FeedbackFeedbackPostError,
  FeedbackFeedbackPostResponse,
  GetAgentAgentAgentIdGetData,
  GetAgentAgentAgentIdGetError,
  GetAgentAgentAgentIdGetResponse,
  GetAgentToolAgentAgentIdToolToolIdGetData,
  GetAgentToolAgentAgentIdToolToolIdGetError,
  GetAgentToolAgentAgentIdToolToolIdGetResponse,
  GetAgentTriggerAgentAgentIdTriggerTriggerIdGetData,
  GetAgentTriggerAgentAgentIdTriggerTriggerIdGetError,
  GetAgentTriggerAgentAgentIdTriggerTriggerIdGetResponse,
  GetAgentWalletAgentAgentIdWalletWalletIdGetData,
  GetAgentWalletAgentAgentIdWalletWalletIdGetError,
  GetAgentWalletAgentAgentIdWalletWalletIdGetResponse,
  GetAgentWalletsAgentAgentIdWalletsGetData,
  GetAgentWalletsAgentAgentIdWalletsGetError,
  GetAgentWalletsAgentAgentIdWalletsGetResponse,
  GetAgentsAgentsGetData,
  GetAgentsAgentsGetResponse,
  GetConversationConversationConversationIdGetData,
  GetConversationConversationConversationIdGetError,
  GetConversationConversationConversationIdGetResponse,
  GetConversationsConversationsGetData,
  GetConversationsConversationsGetError,
  GetConversationsConversationsGetResponse,
  GetDelegatePayloadAuthDelegatePayloadPostData,
  GetDelegatePayloadAuthDelegatePayloadPostError,
  GetDelegatePayloadAuthDelegatePayloadPostResponse,
  GetModelsModelsGetData,
  GetModelsModelsGetResponse,
  GetSessionListSessionListGetData,
  GetSessionListSessionListGetResponse,
  GetSessionSessionSessionIdGetData,
  GetSessionSessionSessionIdGetError,
  GetSessionSessionSessionIdGetResponse,
  GetUserUserGetData,
  GetUserUserGetResponse,
  GetUserWalletUserWalletWalletIdGetData,
  GetUserWalletUserWalletWalletIdGetError,
  GetUserWalletUserWalletWalletIdGetResponse,
  GetUserWalletsUserWalletsGetData,
  GetUserWalletsUserWalletsGetResponse,
  LoginDelegateAuthDelegateLoginPostData,
  LoginDelegateAuthDelegateLoginPostError,
  LoginDelegateAuthDelegateLoginPostResponse,
  PostUserWalletUserWalletPostData,
  PostUserWalletUserWalletPostError,
  PutUserWalletUserWalletWalletIdPutData,
  PutUserWalletUserWalletWalletIdPutError,
  UpdateAgentAgentAgentIdPutData,
  UpdateAgentAgentAgentIdPutError,
  UpdateAgentAgentAgentIdPutResponse,
  UpdateAgentToolAgentAgentIdToolToolIdPutData,
  UpdateAgentToolAgentAgentIdToolToolIdPutError,
  UpdateAgentToolAgentAgentIdToolToolIdPutResponse,
  UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutData,
  UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutError,
  UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutResponse,
  UpdateConversationConversationConversationIdPutData,
  UpdateConversationConversationConversationIdPutError,
  UpdateConversationConversationConversationIdPutResponse,
  UpdateConversationMessageConversationConversationIdMessageMessageIdPutData,
  UpdateConversationMessageConversationConversationIdMessageMessageIdPutError,
  UpdateConversationMessageConversationConversationIdMessageMessageIdPutResponse,
  UpdateSessionSessionSessionIdPutData,
  UpdateSessionSessionSessionIdPutError,
  UpdateSessionSessionSessionIdPutResponse,
  VerifyAuthAuthVerifyGetData,
  VerifyAuthAuthVerifyGetResponse,
} from "./types.gen.js";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get Session List
 */
export const getSessionListSessionListGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetSessionListSessionListGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSessionListSessionListGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/list",
    ...options,
  });
};

/**
 * Delete Session
 */
export const deleteSessionSessionSessionIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteSessionSessionSessionIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteSessionSessionSessionIdDeleteResponse,
    DeleteSessionSessionSessionIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}",
    ...options,
  });
};

/**
 * Get Session
 */
export const getSessionSessionSessionIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetSessionSessionSessionIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetSessionSessionSessionIdGetResponse,
    GetSessionSessionSessionIdGetError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}",
    ...options,
  });
};

/**
 * Update Session
 */
export const updateSessionSessionSessionIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateSessionSessionSessionIdPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateSessionSessionSessionIdPutResponse,
    UpdateSessionSessionSessionIdPutError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Session
 */
export const createSessionSessionPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateSessionSessionPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateSessionSessionPostResponse,
    CreateSessionSessionPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Clear Session
 */
export const clearSessionSessionSessionIdClearPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ClearSessionSessionSessionIdClearPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ClearSessionSessionSessionIdClearPostResponse,
    ClearSessionSessionSessionIdClearPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}/clear",
    ...options,
  });
};

/**
 * Chat
 * Process a chat message and return the response
 */
export const chatChatPost = <ThrowOnError extends boolean = false>(
  options: Options<ChatChatPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ChatChatPostResponse,
    ChatChatPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/chat",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Chat Completions
 * Process a chat message and return the response
 */
export const chatCompletionsChatCompletionsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ChatCompletionsChatCompletionsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ChatCompletionsChatCompletionsPostResponse,
    ChatCompletionsChatCompletionsPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/chat/completions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Execute
 * Process an execute request and return the response
 */
export const executeExecutePost = <ThrowOnError extends boolean = false>(
  options: Options<ExecuteExecutePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ExecuteExecutePostResponse,
    ExecuteExecutePostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/execute",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Feedback
 * Process a feedback request and return the response
 */
export const feedbackFeedbackPost = <ThrowOnError extends boolean = false>(
  options: Options<FeedbackFeedbackPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    FeedbackFeedbackPostResponse,
    FeedbackFeedbackPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/feedback",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Models
 * Get all models
 */
export const getModelsModelsGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetModelsModelsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetModelsModelsGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/models",
    ...options,
  });
};

/**
 * Get Delegate Payload
 * Get a delegate payload
 */
export const getDelegatePayloadAuthDelegatePayloadPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetDelegatePayloadAuthDelegatePayloadPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    GetDelegatePayloadAuthDelegatePayloadPostResponse,
    GetDelegatePayloadAuthDelegatePayloadPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/auth/delegate/payload",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Login Delegate
 * Login with SIWE
 */
export const loginDelegateAuthDelegateLoginPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LoginDelegateAuthDelegateLoginPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LoginDelegateAuthDelegateLoginPostResponse,
    LoginDelegateAuthDelegateLoginPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/auth/delegate/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Verify Auth
 * Verify a delegate payload
 */
export const verifyAuthAuthVerifyGet = <ThrowOnError extends boolean = false>(
  options?: Options<VerifyAuthAuthVerifyGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    VerifyAuthAuthVerifyGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/auth/verify",
    ...options,
  });
};

/**
 * Get User
 * Get the current user
 */
export const getUserUserGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserUserGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserUserGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user",
    ...options,
  });
};

/**
 * Get User Wallets
 * Get all user wallets
 */
export const getUserWalletsUserWalletsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetUserWalletsUserWalletsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserWalletsUserWalletsGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallets",
    ...options,
  });
};

/**
 * Delete User Wallet
 * Delete a user wallet
 */
export const deleteUserWalletUserWalletWalletIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteUserWalletUserWalletWalletIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    DeleteUserWalletUserWalletWalletIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet/{wallet_id}",
    ...options,
  });
};

/**
 * Get User Wallet
 * Get a user wallet
 */
export const getUserWalletUserWalletWalletIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUserWalletUserWalletWalletIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserWalletUserWalletWalletIdGetResponse,
    GetUserWalletUserWalletWalletIdGetError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet/{wallet_id}",
    ...options,
  });
};

/**
 * Put User Wallet
 * Update a user wallet
 */
export const putUserWalletUserWalletWalletIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PutUserWalletUserWalletWalletIdPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    unknown,
    PutUserWalletUserWalletWalletIdPutError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet/{wallet_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Post User Wallet
 * Create a user wallet
 */
export const postUserWalletUserWalletPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostUserWalletUserWalletPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    PostUserWalletUserWalletPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Agents
 * Get all agents
 */
export const getAgentsAgentsGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetAgentsAgentsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAgentsAgentsGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agents",
    ...options,
  });
};

/**
 * Delete Agent
 * Delete an agent
 */
export const deleteAgentAgentAgentIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteAgentAgentAgentIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAgentAgentAgentIdDeleteResponse,
    DeleteAgentAgentAgentIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}",
    ...options,
  });
};

/**
 * Get Agent
 * Get an agent
 */
export const getAgentAgentAgentIdGet = <ThrowOnError extends boolean = false>(
  options: Options<GetAgentAgentAgentIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentAgentAgentIdGetResponse,
    GetAgentAgentAgentIdGetError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}",
    ...options,
  });
};

/**
 * Update Agent
 * Update an agent
 */
export const updateAgentAgentAgentIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateAgentAgentAgentIdPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAgentAgentAgentIdPutResponse,
    UpdateAgentAgentAgentIdPutError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Agent
 * Create an agent
 */
export const createAgentAgentPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateAgentAgentPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAgentAgentPostResponse,
    CreateAgentAgentPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Agent Trigger
 * Delete an agent trigger
 */
export const deleteAgentTriggerAgentAgentIdTriggerTriggerIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteResponse,
    DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger/{trigger_id}",
    ...options,
  });
};

/**
 * Get Agent Trigger
 * Get an agent trigger
 */
export const getAgentTriggerAgentAgentIdTriggerTriggerIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetAgentTriggerAgentAgentIdTriggerTriggerIdGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentTriggerAgentAgentIdTriggerTriggerIdGetResponse,
    GetAgentTriggerAgentAgentIdTriggerTriggerIdGetError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger/{trigger_id}",
    ...options,
  });
};

/**
 * Update Agent Trigger
 * Update an agent trigger
 */
export const updateAgentTriggerAgentAgentIdTriggerTriggerIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutResponse,
    UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger/{trigger_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Agent Trigger
 * Create an agent trigger
 */
export const createAgentTriggerAgentAgentIdTriggerPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateAgentTriggerAgentAgentIdTriggerPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAgentTriggerAgentAgentIdTriggerPostResponse,
    CreateAgentTriggerAgentAgentIdTriggerPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Agent Tool
 * Delete an agent tool
 */
export const deleteAgentToolAgentAgentIdToolToolIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteAgentToolAgentAgentIdToolToolIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAgentToolAgentAgentIdToolToolIdDeleteResponse,
    DeleteAgentToolAgentAgentIdToolToolIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool/{tool_id}",
    ...options,
  });
};

/**
 * Get Agent Tool
 * Get an agent tool
 */
export const getAgentToolAgentAgentIdToolToolIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetAgentToolAgentAgentIdToolToolIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentToolAgentAgentIdToolToolIdGetResponse,
    GetAgentToolAgentAgentIdToolToolIdGetError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool/{tool_id}",
    ...options,
  });
};

/**
 * Update Agent Tool
 * Update an agent tool
 */
export const updateAgentToolAgentAgentIdToolToolIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateAgentToolAgentAgentIdToolToolIdPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAgentToolAgentAgentIdToolToolIdPutResponse,
    UpdateAgentToolAgentAgentIdToolToolIdPutError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool/{tool_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Agent Tool
 * Create an agent tool
 */
export const createAgentToolAgentAgentIdToolPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateAgentToolAgentAgentIdToolPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAgentToolAgentAgentIdToolPostResponse,
    CreateAgentToolAgentAgentIdToolPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Agent Wallets
 * Get all agent wallets
 */
export const getAgentWalletsAgentAgentIdWalletsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetAgentWalletsAgentAgentIdWalletsGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentWalletsAgentAgentIdWalletsGetResponse,
    GetAgentWalletsAgentAgentIdWalletsGetError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/wallets",
    ...options,
  });
};

/**
 * Get Agent Wallet
 * Get an agent wallet
 */
export const getAgentWalletAgentAgentIdWalletWalletIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetAgentWalletAgentAgentIdWalletWalletIdGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentWalletAgentAgentIdWalletWalletIdGetResponse,
    GetAgentWalletAgentAgentIdWalletWalletIdGetError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/wallet/{wallet_id}",
    ...options,
  });
};

/**
 * Get Conversations
 * Get all conversations
 */
export const getConversationsConversationsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetConversationsConversationsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetConversationsConversationsGetResponse,
    GetConversationsConversationsGetError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversations",
    ...options,
  });
};

/**
 * Delete Conversation
 * Delete a conversation
 */
export const deleteConversationConversationConversationIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteConversationConversationConversationIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteConversationConversationConversationIdDeleteResponse,
    DeleteConversationConversationConversationIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}",
    ...options,
  });
};

/**
 * Get Conversation
 * Get a conversation
 */
export const getConversationConversationConversationIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetConversationConversationConversationIdGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetConversationConversationConversationIdGetResponse,
    GetConversationConversationConversationIdGetError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}",
    ...options,
  });
};

/**
 * Update Conversation
 * Update a conversation
 */
export const updateConversationConversationConversationIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UpdateConversationConversationConversationIdPutData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateConversationConversationConversationIdPutResponse,
    UpdateConversationConversationConversationIdPutError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Conversation
 * Create a conversation
 */
export const createConversationConversationPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateConversationConversationPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateConversationConversationPostResponse,
    CreateConversationConversationPostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Conversation Message
 * Create a message for a conversation
 */
export const createConversationMessageConversationConversationIdMessagePost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    CreateConversationMessageConversationConversationIdMessagePostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateConversationMessageConversationConversationIdMessagePostResponse,
    CreateConversationMessageConversationConversationIdMessagePostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}/message",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update Conversation Message
 * Update a message for a conversation
 */
export const updateConversationMessageConversationConversationIdMessageMessageIdPut =
  <ThrowOnError extends boolean = false>(
    options: Options<
      UpdateConversationMessageConversationConversationIdMessageMessageIdPutData,
      ThrowOnError
    >,
  ) => {
    return (options.client ?? _heyApiClient).put<
      UpdateConversationMessageConversationConversationIdMessageMessageIdPutResponse,
      UpdateConversationMessageConversationConversationIdMessageMessageIdPutError,
      ThrowOnError
    >({
      security: [
        {
          name: "x-secret-key",
          type: "apiKey",
        },
      ],
      url: "/conversation/{conversation_id}/message/{message_id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  };
