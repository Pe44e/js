// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Options as ClientOptions,
  TDataShape,
} from "@hey-api/client-fetch";
import { client as _heyApiClient } from "./client.gen.js";
import type {
  AuthDelegateLoginData,
  AuthDelegateLoginError,
  AuthDelegateLoginResponse,
  CreateAgentData,
  CreateAgentError,
  CreateAgentResponse,
  CreateAgentToolData,
  CreateAgentToolError,
  CreateAgentToolResponse,
  CreateAgentTriggerData,
  CreateAgentTriggerError,
  CreateAgentTriggerResponse,
  CreateConversationData,
  CreateConversationError,
  CreateConversationMessageData,
  CreateConversationMessageError,
  CreateConversationMessageResponse,
  CreateConversationResponse,
  CreateUserWalletData,
  CreateUserWalletError,
  DeleteAgentData,
  DeleteAgentError,
  DeleteAgentResponse,
  DeleteAgentToolData,
  DeleteAgentToolError,
  DeleteAgentToolResponse,
  DeleteAgentTriggerData,
  DeleteAgentTriggerError,
  DeleteAgentTriggerResponse,
  DeleteConversationData,
  DeleteConversationError,
  DeleteConversationResponse,
  DeleteUserWalletData,
  DeleteUserWalletError,
  DeprecatedChatCompletionsData,
  DeprecatedChatCompletionsError,
  DeprecatedChatCompletionsResponse,
  DeprecatedChatData,
  DeprecatedChatError,
  DeprecatedChatResponse,
  DeprecatedClearSessionData,
  DeprecatedClearSessionError,
  DeprecatedClearSessionResponse,
  DeprecatedCreateSessionData,
  DeprecatedCreateSessionError,
  DeprecatedCreateSessionResponse,
  DeprecatedDeleteSessionData,
  DeprecatedDeleteSessionError,
  DeprecatedDeleteSessionResponse,
  DeprecatedExecuteData,
  DeprecatedExecuteError,
  DeprecatedExecuteResponse,
  DeprecatedGetSessionData,
  DeprecatedGetSessionError,
  DeprecatedGetSessionResponse,
  DeprecatedGetSessionsData,
  DeprecatedGetSessionsResponse,
  DeprecatedUpdateSessionData,
  DeprecatedUpdateSessionError,
  DeprecatedUpdateSessionResponse,
  FeedbackData,
  FeedbackError,
  FeedbackResponse,
  GetAgentData,
  GetAgentError,
  GetAgentResponse,
  GetAgentToolData,
  GetAgentToolError,
  GetAgentToolResponse,
  GetAgentTriggerData,
  GetAgentTriggerError,
  GetAgentTriggerResponse,
  GetAgentWalletData,
  GetAgentWalletError,
  GetAgentWalletResponse,
  GetAgentWalletsData,
  GetAgentWalletsError,
  GetAgentWalletsResponse,
  GetAgentsData,
  GetAgentsResponse,
  GetAuthDelegatePayloadData,
  GetAuthDelegatePayloadError,
  GetAuthDelegatePayloadResponse,
  GetConversationData,
  GetConversationError,
  GetConversationResponse,
  GetConversationsData,
  GetConversationsError,
  GetConversationsResponse,
  GetModelsData,
  GetModelsResponse,
  GetRegistryAgentsData,
  GetRegistryAgentsError,
  GetRegistryAgentsResponse,
  GetUserData,
  GetUserResponse,
  GetUserWalletData,
  GetUserWalletError,
  GetUserWalletResponse,
  GetUserWalletsData,
  GetUserWalletsResponse,
  UpdateAgentData,
  UpdateAgentError,
  UpdateAgentResponse,
  UpdateAgentToolData,
  UpdateAgentToolError,
  UpdateAgentToolResponse,
  UpdateAgentTriggerData,
  UpdateAgentTriggerError,
  UpdateAgentTriggerResponse,
  UpdateConversationData,
  UpdateConversationError,
  UpdateConversationMessageData,
  UpdateConversationMessageError,
  UpdateConversationMessageResponse,
  UpdateConversationResponse,
  UpdateUserWalletData,
  UpdateUserWalletError,
  VerifyAuthData,
  VerifyAuthResponse,
} from "./types.gen.js";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get Session List
 */
export const deprecatedGetSessions = <ThrowOnError extends boolean = false>(
  options?: Options<DeprecatedGetSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    DeprecatedGetSessionsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/list",
    ...options,
  });
};

/**
 * Delete Session
 */
export const deprecatedDeleteSession = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedDeleteSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeprecatedDeleteSessionResponse,
    DeprecatedDeleteSessionError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}",
    ...options,
  });
};

/**
 * Get Session
 */
export const deprecatedGetSession = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedGetSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    DeprecatedGetSessionResponse,
    DeprecatedGetSessionError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}",
    ...options,
  });
};

/**
 * Update Session
 */
export const deprecatedUpdateSession = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedUpdateSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    DeprecatedUpdateSessionResponse,
    DeprecatedUpdateSessionError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Session
 */
export const deprecatedCreateSession = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedCreateSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DeprecatedCreateSessionResponse,
    DeprecatedCreateSessionError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Clear Session
 */
export const deprecatedClearSession = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedClearSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DeprecatedClearSessionResponse,
    DeprecatedClearSessionError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}/clear",
    ...options,
  });
};

/**
 * Chat
 * Process a chat message and return the response
 */
export const deprecatedChat = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedChatData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DeprecatedChatResponse,
    DeprecatedChatError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/chat",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Chat Completions
 * Process a chat message and return the response
 */
export const deprecatedChatCompletions = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedChatCompletionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DeprecatedChatCompletionsResponse,
    DeprecatedChatCompletionsError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/chat/completions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Execute
 * Process an execute request and return the response
 */
export const deprecatedExecute = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedExecuteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DeprecatedExecuteResponse,
    DeprecatedExecuteError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/execute",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Feedback
 * Process a feedback request and return the response
 */
export const feedback = <ThrowOnError extends boolean = false>(
  options: Options<FeedbackData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    FeedbackResponse,
    FeedbackError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/feedback",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Models
 * Get all models
 */
export const getModels = <ThrowOnError extends boolean = false>(
  options?: Options<GetModelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetModelsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/models",
    ...options,
  });
};

/**
 * Get Delegate Payload
 * Get a delegate payload
 */
export const getAuthDelegatePayload = <ThrowOnError extends boolean = false>(
  options: Options<GetAuthDelegatePayloadData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    GetAuthDelegatePayloadResponse,
    GetAuthDelegatePayloadError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/auth/delegate/payload",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Login Delegate
 * Login with SIWE
 */
export const authDelegateLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthDelegateLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthDelegateLoginResponse,
    AuthDelegateLoginError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/auth/delegate/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Verify Auth
 * Verify a delegate payload
 */
export const verifyAuth = <ThrowOnError extends boolean = false>(
  options?: Options<VerifyAuthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    VerifyAuthResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/auth/verify",
    ...options,
  });
};

/**
 * Get User
 * Get the current user
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user",
    ...options,
  });
};

/**
 * Get User Wallets
 * Get all user wallets
 */
export const getUserWallets = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserWalletsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserWalletsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallets",
    ...options,
  });
};

/**
 * Delete User Wallet
 * Delete a user wallet
 */
export const deleteUserWallet = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    DeleteUserWalletError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet/{wallet_id}",
    ...options,
  });
};

/**
 * Get User Wallet
 * Get a user wallet
 */
export const getUserWallet = <ThrowOnError extends boolean = false>(
  options: Options<GetUserWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserWalletResponse,
    GetUserWalletError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet/{wallet_id}",
    ...options,
  });
};

/**
 * Put User Wallet
 * Update a user wallet
 */
export const updateUserWallet = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    unknown,
    UpdateUserWalletError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet/{wallet_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Post User Wallet
 * Create a user wallet
 */
export const createUserWallet = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    CreateUserWalletError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Agents
 * Get all agents
 */
export const getAgents = <ThrowOnError extends boolean = false>(
  options?: Options<GetAgentsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAgentsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agents",
    ...options,
  });
};

/**
 * Delete Agent
 * Delete an agent
 */
export const deleteAgent = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAgentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAgentResponse,
    DeleteAgentError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}",
    ...options,
  });
};

/**
 * Get Agent
 * Get an agent
 */
export const getAgent = <ThrowOnError extends boolean = false>(
  options: Options<GetAgentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentResponse,
    GetAgentError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}",
    ...options,
  });
};

/**
 * Update Agent
 * Update an agent
 */
export const updateAgent = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAgentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAgentResponse,
    UpdateAgentError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Agent
 * Create an agent
 */
export const createAgent = <ThrowOnError extends boolean = false>(
  options: Options<CreateAgentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAgentResponse,
    CreateAgentError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Agent Trigger
 * Delete an agent trigger
 */
export const deleteAgentTrigger = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAgentTriggerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAgentTriggerResponse,
    DeleteAgentTriggerError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger/{trigger_id}",
    ...options,
  });
};

/**
 * Get Agent Trigger
 * Get an agent trigger
 */
export const getAgentTrigger = <ThrowOnError extends boolean = false>(
  options: Options<GetAgentTriggerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentTriggerResponse,
    GetAgentTriggerError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger/{trigger_id}",
    ...options,
  });
};

/**
 * Update Agent Trigger
 * Update an agent trigger
 */
export const updateAgentTrigger = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAgentTriggerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAgentTriggerResponse,
    UpdateAgentTriggerError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger/{trigger_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Agent Trigger
 * Create an agent trigger
 */
export const createAgentTrigger = <ThrowOnError extends boolean = false>(
  options: Options<CreateAgentTriggerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAgentTriggerResponse,
    CreateAgentTriggerError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Agent Tool
 * Delete an agent tool
 */
export const deleteAgentTool = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAgentToolData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAgentToolResponse,
    DeleteAgentToolError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool/{tool_id}",
    ...options,
  });
};

/**
 * Get Agent Tool
 * Get an agent tool
 */
export const getAgentTool = <ThrowOnError extends boolean = false>(
  options: Options<GetAgentToolData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentToolResponse,
    GetAgentToolError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool/{tool_id}",
    ...options,
  });
};

/**
 * Update Agent Tool
 * Update an agent tool
 */
export const updateAgentTool = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAgentToolData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAgentToolResponse,
    UpdateAgentToolError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool/{tool_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Agent Tool
 * Create an agent tool
 */
export const createAgentTool = <ThrowOnError extends boolean = false>(
  options: Options<CreateAgentToolData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAgentToolResponse,
    CreateAgentToolError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Agent Wallets
 * Get all agent wallets
 */
export const getAgentWallets = <ThrowOnError extends boolean = false>(
  options: Options<GetAgentWalletsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentWalletsResponse,
    GetAgentWalletsError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/wallets",
    ...options,
  });
};

/**
 * Get Agent Wallet
 * Get an agent wallet
 */
export const getAgentWallet = <ThrowOnError extends boolean = false>(
  options: Options<GetAgentWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentWalletResponse,
    GetAgentWalletError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/wallet/{wallet_id}",
    ...options,
  });
};

/**
 * Get Conversations
 * Get all conversations
 */
export const getConversations = <ThrowOnError extends boolean = false>(
  options?: Options<GetConversationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetConversationsResponse,
    GetConversationsError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversations",
    ...options,
  });
};

/**
 * Delete Conversation
 * Delete a conversation
 */
export const deleteConversation = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteConversationResponse,
    DeleteConversationError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}",
    ...options,
  });
};

/**
 * Get Conversation
 * Get a conversation
 */
export const getConversation = <ThrowOnError extends boolean = false>(
  options: Options<GetConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetConversationResponse,
    GetConversationError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}",
    ...options,
  });
};

/**
 * Update Conversation
 * Update a conversation
 */
export const updateConversation = <ThrowOnError extends boolean = false>(
  options: Options<UpdateConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateConversationResponse,
    UpdateConversationError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Conversation
 * Create a conversation
 */
export const createConversation = <ThrowOnError extends boolean = false>(
  options: Options<CreateConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateConversationResponse,
    CreateConversationError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create Conversation Message
 * Create a message for a conversation
 */
export const createConversationMessage = <ThrowOnError extends boolean = false>(
  options: Options<CreateConversationMessageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateConversationMessageResponse,
    CreateConversationMessageError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}/message",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update Conversation Message
 * Update a message for a conversation
 */
export const updateConversationMessage = <ThrowOnError extends boolean = false>(
  options: Options<UpdateConversationMessageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateConversationMessageResponse,
    UpdateConversationMessageError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}/message/{message_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Registry Agents
 * Get all agents from the registry
 */
export const getRegistryAgents = <ThrowOnError extends boolean = false>(
  options?: Options<GetRegistryAgentsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetRegistryAgentsResponse,
    GetRegistryAgentsError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/registry/agents",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
