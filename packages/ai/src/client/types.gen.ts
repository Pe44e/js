// This file is auto-generated by @hey-api/openapi-ts

export type AbiDocFormatted = {
  abi: {
    [key: string]: unknown;
  };
  abi_inputs_parameters_description: {
    [key: string]: string;
  } | null;
  abi_inputs_description: string | null;
  abi_outputs_parameters_description: {
    [key: string]: string;
  } | null;
  function_description: string | null;
  function_signature: string;
  full_signature: string;
};

export type AgentActionContext = {
  type?: "context";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: CompletionContextOutput | string;
};

export type AgentActionEval = {
  type?: "eval";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: string;
};

export type AgentActionExecution = {
  type?: "execution";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: AgentTransactionExecution;
};

export type AgentActionImage = {
  type?: "image";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: AgentActionImageData;
};

export type AgentActionImageData = {
  url: string;
  width: number;
  height: number;
};

export type AgentActionInit = {
  type?: "init";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data?: null;
};

export type AgentActionPresence = {
  type?: "presence";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: string;
};

export type AgentActionSignSwap = {
  type?: "sign_swap";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: AgentActionSignSwapData | string;
};

export type AgentActionSignSwapData = {
  transaction: AgentActionSignTransactionData;
  action: string | null;
  intent: AgentActionSignSwapDataIntent;
  from: AgentActionSignSwapDataToken;
  to: AgentActionSignSwapDataToken;
};

export type AgentActionSignSwapDataIntent = {
  originChainId: number;
  originTokenAddress: string;
  destinationChainId: number;
  destinationTokenAddress: string;
  amount: string;
  sender: string;
  receiver: string;
  maxSteps: number;
};

export type AgentActionSignSwapDataToken = {
  address: string;
  chain_id: number;
  amount: string;
  symbol: string;
  decimals: number;
  price: number | null;
};

export type AgentActionSignTransaction = {
  type?: "sign_transaction";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: AgentActionSignTransactionData | string;
};

export type AgentActionSignTransactionData = {
  chainId: number;
  function?: string | null;
  to: string;
  value: string;
  data: string;
};

export type AgentListResponse = {
  id: string;
  name: string;
  description?: string | null;
  created_at: string;
  updated_at: string;
};

export type AgentMemoryResponse = {
  id: string;
};

export type AgentResponse = {
  id: string;
  user_id: string;
  name: string;
  description?: string | null;
  model_name: string;
  is_public: boolean;
  context: AgentTaskContext;
  prompts?: Array<ChatMessage>;
  tools?: Array<AgentToolResponse>;
  triggers?: Array<AgentTriggerResponse>;
  memories?: Array<AgentMemoryResponse>;
  wallets?: Array<AgentWalletResponse>;
  created_at: string;
  updated_at: string;
};

export type AgentStepImage = {
  type?: "image";
  image: AgentActionImageData;
};

export type AgentStepText = {
  type?: "text";
  text: string;
};

export type AgentTaskContext = {
  chain_ids?: Array<number> | null;
  chain_type?: "all" | "mainnet" | "testnet";
  automatic_execution?: boolean;
};

export type AgentTaskOptions = {
  temperature?: number | null;
  max_tokens?: number | null;
  seed?: number | null;
};

export type AgentTaskUsageReadable = {
  input_cached_tokens: number;
  input_text_tokens: number;
  input_image_tokens: number;
  output_text_tokens: number;
  output_image_tokens: number;
  output_reasoning_tokens: number;
  tool_read_tokens: number;
  tool_write_tokens: number;
  tool_requests: number;
  readonly input_tokens: number;
  readonly output_tokens: number;
  readonly total_tokens: number;
  readonly tool_tokens: number;
};

export type AgentTaskUsageWritable = {
  input_cached_tokens: number;
  input_text_tokens: number;
  input_image_tokens: number;
  output_text_tokens: number;
  output_image_tokens: number;
  output_reasoning_tokens: number;
  tool_read_tokens: number;
  tool_write_tokens: number;
  tool_requests: number;
};

export type AgentToolDataAgent = {
  type?: "agent";
  agent_id: string;
};

export type AgentToolDataMcp = {
  type?: "mcp";
  config: McpConfig;
};

export type AgentToolDescription = {
  agent_id: string;
  name: string;
  description: string;
};

export type AgentToolResponse = {
  id: string;
  name: string | null;
  description: string | null;
  data:
    | ({
        type: "agent";
      } & AgentToolDataAgent)
    | ({
        type: "mcp";
      } & AgentToolDataMcp);
  created_at: string;
  updated_at: string;
};

export type AgentTransaction = {
  action: string;
  transactions: Array<AgentTransactionDataTransaction>;
  simulation?: AgentTransactionDataSimulation | null;
  description?: string | null;
};

export type AgentTransactionDataSimulation = {
  success: boolean;
  message: string;
  chains: Array<AgentTransactionDataSimulationChain>;
  contracts?: Array<AgentTransactionDataSimulationContract> | null;
  tokens?: Array<AgentTransactionDataSimulationToken> | null;
};

export type AgentTransactionDataSimulationChain = {
  chain_id: number;
  name: string;
};

export type AgentTransactionDataSimulationContract = {
  chain_id: number;
  address: string;
  name: string;
  type: "call" | "create";
  function_name?: string | null;
  function_args?: {
    [key: string]: unknown;
  } | null;
};

export type AgentTransactionDataSimulationToken = {
  chain_id: number;
  address: string;
  name: string;
  symbol: string;
  decimals: number;
  amount: number;
};

export type AgentTransactionDataTransaction = {
  to: string;
  value: string;
  data: string;
  chain_id: number;
};

export type AgentTransactionExecution = {
  id: string;
  wallet_address: string;
  chain_id: number;
  status: "pending" | "confirmed" | "failed";
  transaction_hash?: string | null;
  error_message?: string | null;
  transactions?: Array<AgentTransactionDataTransaction> | null;
};

export type AgentTriggerData = {
  type: unknown;
};

export type AgentTriggerDataContinuous = {
  type?: "continuous";
};

export type AgentTriggerDataTime = {
  type?: "time";
  cron_expression?: string | null;
};

export type AgentTriggerResponse = {
  id: string;
  name: string;
  type: AgentTriggerType;
  data: AgentTriggerData;
  prompts: Array<ChatMessage>;
  is_paused: boolean;
  created_at: string;
  updated_at: string;
};

export type AgentTriggerType = "continuous" | "time";

export type AgentWalletResponse = {
  id: string;
  type: WalletType;
  address: string;
  data:
    | ({
        type: "server";
      } & WalletDataServer)
    | ({
        type: "eip4337";
      } & WalletDataEip4337);
  transactions?: Array<WalletTransaction>;
  created_at: string;
  updated_at: string;
};

/**
 * Base class for all blockchain entities tracked in memory.
 */
export type BlockchainEntity = {
  chain_id: number;
  address: string;
  roles?: Array<EntityRole>;
  first_mentioned_at?: string;
  last_mentioned_at?: string;
};

export type ChatContentImage = {
  type?: "image";
  image_url?: string | null;
  b64?: string | null;
};

export type ChatContentText = {
  type?: "text";
  text: string;
};

export type ChatContentTransaction = {
  type?: "transaction";
  chain_id: number;
  transaction_hash: string;
};

export type ChatMessage = {
  role: "system" | "user" | "assistant";
  content:
    | string
    | Array<
        | ({
            type: "image";
          } & ChatContentImage)
        | ({
            type: "text";
          } & ChatContentText)
        | ({
            type: "transaction";
          } & ChatContentTransaction)
      >;
};

export type ChatParamsMultiMessages = {
  stream?: boolean | null;
  model_name?: string | null;
  session_id?: string | null;
  context?: CompletionContextInput | null;
  max_tokens?: number | null;
  max_completion_tokens?: number | null;
  frequency_penalty?: number | null;
  presence_penalty?: number | null;
  temperature?: number | null;
  top_p?: number | null;
  response_format?:
    | (
        | ({
            type: "json_object";
          } & CompletionResponseFormatJsonObject)
        | ({
            type: "json_schema";
          } & CompletionResponseFormatJsonSchema)
      )
    | null;
  messages: Array<ChatMessage>;
};

export type ChatParamsSingleMessage = {
  stream?: boolean | null;
  model_name?: string | null;
  session_id?: string | null;
  context?: CompletionContextInput | null;
  max_tokens?: number | null;
  max_completion_tokens?: number | null;
  frequency_penalty?: number | null;
  presence_penalty?: number | null;
  temperature?: number | null;
  top_p?: number | null;
  response_format?:
    | (
        | ({
            type: "json_object";
          } & CompletionResponseFormatJsonObject)
        | ({
            type: "json_schema";
          } & CompletionResponseFormatJsonSchema)
      )
    | null;
  message: string;
};

export type ChatResponse = {
  message: string;
  actions: Array<
    | ({
        type: "init";
      } & AgentActionInit)
    | ({
        type: "eval";
      } & AgentActionEval)
    | ({
        type: "presence";
      } & AgentActionPresence)
    | ({
        type: "context";
      } & AgentActionContext)
    | ({
        type: "image";
      } & AgentActionImage)
    | ({
        type: "execution";
      } & AgentActionExecution)
    | ({
        type: "sign_transaction";
      } & AgentActionSignTransaction)
    | ({
        type: "sign_swap";
      } & AgentActionSignSwap)
  > | null;
  session_id: string | null;
  request_id: string | null;
};

export type CompletionChoice = {
  message: CompletionChoiceChatMessage;
  finish_reason: "stop" | "length";
  index: number;
};

export type CompletionChoiceChatMessage = {
  role: "user" | "assistant";
  content: string;
};

export type CompletionContextInput = {
  session_id?: string | null;
  wallet_address?:
    | string
    | ({
        type: "server_wallet";
      } & ContextFilterServerWallet)
    | null;
  chain_ids?: Array<number> | null;
  networks?: "all" | "mainnet" | "testnet";
  prompts?: Array<ChatMessage>;
  mcp_tools?: Array<McpTool> | null;
  agent_tools?: Array<AgentToolDescription> | null;
  deployed_contracts?: Array<ContractBase>;
  entities?: {
    [key: string]: BlockchainEntity;
  };
};

export type CompletionContextOutput = {
  session_id?: string | null;
  wallet_address?:
    | string
    | ({
        type: "server_wallet";
      } & ContextFilterServerWallet)
    | null;
  chain_ids?: Array<number> | null;
  networks?: "all" | "mainnet" | "testnet";
  prompts?: Array<ChatMessage>;
};

export type CompletionParams = {
  messages: Array<ChatMessage>;
  model?: string | null;
  stream?: boolean;
  max_tokens?: number | null;
  max_completion_tokens?: number | null;
  frequency_penalty?: number | null;
  presence_penalty?: number | null;
  temperature?: number | null;
  top_p?: number | null;
  response_format?:
    | (
        | ({
            type: "json_object";
          } & CompletionResponseFormatJsonObject)
        | ({
            type: "json_schema";
          } & CompletionResponseFormatJsonSchema)
      )
    | null;
  context?: CompletionContextInput | null;
};

export type CompletionResponse = {
  id: string;
  choices: Array<CompletionChoice>;
  created: number;
  object: "chat.completion";
  usage: CompletionUsage;
  actions: Array<
    | ({
        type: "init";
      } & AgentActionInit)
    | ({
        type: "eval";
      } & AgentActionEval)
    | ({
        type: "presence";
      } & AgentActionPresence)
    | ({
        type: "context";
      } & AgentActionContext)
    | ({
        type: "image";
      } & AgentActionImage)
    | ({
        type: "execution";
      } & AgentActionExecution)
    | ({
        type: "sign_transaction";
      } & AgentActionSignTransaction)
    | ({
        type: "sign_swap";
      } & AgentActionSignSwap)
  > | null;
  context: CompletionContextOutput | null;
};

export type CompletionResponseFormatJsonObject = {
  type: "json_object";
};

export type CompletionResponseFormatJsonSchema = {
  type: "json_schema";
  json_schema: {
    [key: string]: unknown;
  };
};

export type CompletionUsage = {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
};

export type ContextFilterServerWallet = {
  type: "server_wallet";
  server_wallet_id?: string | null;
  server_wallet_address?: string | null;
};

/**
 * Base class for contract-like entities that can be processed by ContractMetadata.
 */
export type ContractBase = {
  chain_id: number;
  address: string;
  roles?: Array<EntityRole>;
  first_mentioned_at?: string;
  last_mentioned_at?: string;
  name?: string | null;
  symbol?: string | null;
  standard?: ("ERC20" | "ERC721" | "ERC1155" | "Unknown") | null;
  description?: string | null;
  total_supply?: number | null;
  price?: string | null;
  abi?: Array<AbiDocFormatted> | null;
  deployment_status?: DeploymentStatus;
};

export type ConversationListResponse = {
  id: string;
};

export type ConversationMessageResponseReadable = {
  id: string;
  responses?: Array<ChatMessage> | null;
  steps?: Array<
    | ({
        type: "text";
      } & AgentStepText)
    | ({
        type: "image";
      } & AgentStepImage)
  > | null;
  transactions?: Array<AgentTransaction> | null;
  usage?: AgentTaskUsageReadable | null;
};

export type ConversationMessageResponseWritable = {
  id: string;
  responses?: Array<ChatMessage> | null;
  steps?: Array<
    | ({
        type: "text";
      } & AgentStepText)
    | ({
        type: "image";
      } & AgentStepImage)
  > | null;
  transactions?: Array<AgentTransaction> | null;
  usage?: AgentTaskUsageWritable | null;
};

export type ConversationResponseReadable = {
  id: string;
  responses?: Array<ChatMessage> | null;
  steps?: Array<
    | ({
        type: "text";
      } & AgentStepText)
    | ({
        type: "image";
      } & AgentStepImage)
  > | null;
  transactions?: Array<AgentTransaction> | null;
  usage?: AgentTaskUsageReadable | null;
};

export type ConversationResponseWritable = {
  id: string;
  responses?: Array<ChatMessage> | null;
  steps?: Array<
    | ({
        type: "text";
      } & AgentStepText)
    | ({
        type: "image";
      } & AgentStepImage)
  > | null;
  transactions?: Array<AgentTransaction> | null;
  usage?: AgentTaskUsageWritable | null;
};

/**
 * inherits from CreateAgentParams, but adds triggers and tools
 */
export type CreateAgentHandlerParams = {
  name: string;
  description?: string | null;
  prompts?: Array<ChatMessage> | null;
  triggers?: Array<CreateAgentTriggerParams> | null;
  tools?: Array<CreateAgentToolParams> | null;
};

export type CreateAgentToolParams = {
  name: string;
  data:
    | ({
        type: "agent";
      } & AgentToolDataAgent)
    | ({
        type: "mcp";
      } & AgentToolDataMcp);
  description?: string | null;
};

export type CreateAgentTriggerParams = {
  name: string;
  data:
    | ({
        type: "continuous";
      } & AgentTriggerDataContinuous)
    | ({
        type: "time";
      } & AgentTriggerDataTime);
  prompts?: Array<ChatMessage> | null;
};

export type CreateConversationHandlerParams = {
  title?: string | null;
  is_public?: boolean | null;
  agent_id: string;
};

export type CreateMessageHandlerParams = {
  inputs: Array<ChatMessage>;
  options?: AgentTaskOptions | null;
  context?: AgentTaskContext | null;
  stream?: boolean;
};

export type CreateSessionParams = {
  model_name?: string;
  title?: string | null;
  is_public?: boolean | null;
  context?: CompletionContextInput | null;
};

export type CreateUserWalletParams = {
  type: WalletType;
  data?: WalletDataServer | WalletDataEip4337 | null;
};

export type DeploymentStatus = "unknown" | "pending" | "deployed" | "failed";

export type EntityRole = "mentioned" | "deployed" | "user";

export type Feedback = {
  id: string;
  session_id: string;
  request_id: string;
  feedback_rating: number | null;
  feedback_response: string | null;
  comment: string | null;
  created_at: string | null;
  updated_at: string | null;
};

export type FeedbackParams = {
  session_id: string;
  request_id: string;
  feedback_rating?: number | null;
  feedback_response?: string | null;
  comment?: string | null;
};

export type GetPayloadParams = {
  address: string;
  chain_id?: number | string | null;
};

export type GetPayloadResponse = {
  payload: Payload;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type LoginParams = {
  payload: Payload;
  signature?: string | null;
  token?: string | null;
};

export type LoginResponse = {
  token: string;
};

export type McpConfig = {
  url: string;
  headers?: {
    [key: string]: unknown;
  } | null;
};

export type McpTool = {
  url: string;
  headers?: {
    [key: string]: string;
  } | null;
};

export type Model = {
  id: string;
  object: "model";
  created: number;
  owned_by: "thirdweb";
};

export type ModelResponse = {
  object: "list";
  data: Array<Model>;
};

export type Payload = {
  address: string;
  chain_id: number | null;
  domain: string;
  expiration_time: string;
  invalid_before: string;
  issued_at: string;
  nonce: string;
  statement: string;
  version: string;
  resources: Array<string> | null;
  uri: string;
};

export type RegistryAgentListRequest = {
  user_id?: string | null;
  search_name?: string | null;
  search_description?: string | null;
  created_after?: string | null;
  created_before?: string | null;
  updated_after?: string | null;
  updated_before?: string | null;
  sort_by?: "created_at" | "updated_at" | "name";
  sort_order?: "asc" | "desc";
  limit?: number;
  offset?: number;
};

export type RegistryAgentListResponse = {
  id: string;
  user_id: string;
  name: string;
  description: string;
  created_at: string;
  updated_at: string;
};

export type ResponseModelAgentResponse = {
  result: AgentResponse;
};

export type ResponseModelAgentToolResponse = {
  result: AgentToolResponse;
};

export type ResponseModelAgentTriggerResponse = {
  result: AgentTriggerResponse;
};

export type ResponseModelAgentWalletResponse = {
  result: AgentWalletResponse;
};

export type ResponseModelConversationMessageResponseReadable = {
  result: ConversationMessageResponseReadable;
};

export type ResponseModelConversationMessageResponseWritable = {
  result: ConversationMessageResponseWritable;
};

export type ResponseModelConversationResponseReadable = {
  result: ConversationResponseReadable;
};

export type ResponseModelConversationResponseWritable = {
  result: ConversationResponseWritable;
};

export type ResponseModelFeedback = {
  result: Feedback;
};

export type ResponseModelGetPayloadResponse = {
  result: GetPayloadResponse;
};

export type ResponseModelLoginResponse = {
  result: LoginResponse;
};

export type ResponseModelSessionDeleteResponse = {
  result: SessionDeleteResponse;
};

export type ResponseModelSession = {
  result: Session;
};

export type ResponseModelUuid = {
  result: string;
};

export type ResponseModelUserResponse = {
  result: UserResponse;
};

export type ResponseModelUserWalletResponse = {
  result: UserWalletResponse;
};

export type ResponseModelVerifyJwtResponse = {
  result: VerifyJwtResponse;
};

export type ResponseModelListAgentListResponse = {
  result: Array<AgentListResponse>;
};

export type ResponseModelListAgentWalletResponse = {
  result: Array<AgentWalletResponse>;
};

export type ResponseModelListConversationListResponse = {
  result: Array<ConversationListResponse>;
};

export type ResponseModelListRegistryAgentListResponse = {
  result: Array<RegistryAgentListResponse>;
};

export type ResponseModelListSessionList = {
  result: Array<SessionList>;
};

export type ResponseModelListUserWalletResponse = {
  result: Array<UserWalletResponse>;
};

export type Session = {
  id: string;
  team_id: string;
  project_id: string | null;
  model_name: string;
  is_public: boolean | null;
  title: string | null;
  memory: Array<{
    [key: string]: unknown;
  }> | null;
  history: Array<{
    [key: string]: unknown;
  }> | null;
  action: Array<{
    [key: string]: unknown;
  }> | null;
  context?: CompletionContextOutput | null;
  archive_at: string | null;
  deleted_at: string | null;
  created_at: string | null;
  updated_at: string | null;
};

export type SessionDeleteResponse = {
  id: string;
  deleted_at: string;
};

export type SessionList = {
  id: string;
  title: string | null;
  created_at: string;
  updated_at: string;
};

export type TransactionParams = {
  to: string;
  value: string;
  data: string;
};

export type UpdateAgentHandlerParams = {
  name?: string | null;
  description?: string | null;
  prompts?: Array<ChatMessage> | null;
};

export type UpdateAgentToolParams = {
  name?: string | null;
  data?:
    | (
        | ({
            type: "agent";
          } & AgentToolDataAgent)
        | ({
            type: "mcp";
          } & AgentToolDataMcp)
      )
    | null;
  description?: string | null;
};

export type UpdateAgentTriggerParams = {
  name?: string | null;
  data?:
    | (
        | ({
            type: "continuous";
          } & AgentTriggerDataContinuous)
        | ({
            type: "time";
          } & AgentTriggerDataTime)
      )
    | null;
  is_paused?: boolean | null;
  prompts?: Array<ChatMessage> | null;
};

export type UpdateConversationHandlerParams = {
  title?: string | null;
  is_public?: boolean | null;
};

export type UpdateMessageHandlerParams = {
  inputs?: Array<ChatMessage> | null;
  options?: AgentTaskOptions | null;
  stream?: boolean;
};

export type UpdateSessionParams = {
  title?: string | null;
  model_name?: string | null;
  is_public?: boolean | null;
  context?: CompletionContextInput | null;
};

export type UpdateUserWalletParams = {
  type?: WalletType | null;
  data?: WalletDataServer | WalletDataEip4337 | null;
};

export type UserAgentResponse = {
  id: string;
  name: string;
  description?: string | null;
  created_at: string;
  updated_at: string;
};

export type UserConversationResponse = {
  id: string;
  title: string;
  created_at: string;
  updated_at: string;
};

export type UserMemoryResponse = {
  id: string;
};

export type UserResponse = {
  id: string;
  agents: Array<UserAgentResponse>;
  memories: Array<UserMemoryResponse>;
  conversations: Array<UserConversationResponse>;
  wallets: Array<UserWalletResponse>;
};

export type UserWalletResponse = {
  id: string;
  type: WalletType;
  address: string;
  data:
    | ({
        type: "server";
      } & WalletDataServer)
    | ({
        type: "eip4337";
      } & WalletDataEip4337);
  transactions?: Array<WalletTransaction>;
  created_at: string;
  updated_at: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type VerifyJwtResponse = {
  address: string;
  is_valid: boolean;
};

export type WalletDataEip4337 = {
  type?: "eip4337";
  signer_address: string;
  factory_address: string;
  smart_account_address: string;
  entrypoint_address: string;
  sponsor_gas?: boolean;
  chain_ids?: Array<number> | null;
};

export type WalletDataServer = {
  type?: "server";
  smart_account_address: string;
};

export type WalletTransaction = {
  id: string;
  chain_id: number;
  params: Array<TransactionParams>;
  hash: string | null;
  submitted_at: string | null;
  cancelled_at: string | null;
  errored_at: string | null;
  error_message: string | null;
  created_at: string;
  updated_at: string;
};

export type WalletType = "eoa" | "server" | "eip4337" | "eip7702";

export type DeprecatedGetSessionsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/session/list";
};

export type DeprecatedGetSessionsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListSessionList;
};

export type DeprecatedGetSessionsResponse =
  DeprecatedGetSessionsResponses[keyof DeprecatedGetSessionsResponses];

export type DeprecatedDeleteSessionData = {
  body?: never;
  path: {
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}";
};

export type DeprecatedDeleteSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedDeleteSessionError =
  DeprecatedDeleteSessionErrors[keyof DeprecatedDeleteSessionErrors];

export type DeprecatedDeleteSessionResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSessionDeleteResponse;
};

export type DeprecatedDeleteSessionResponse =
  DeprecatedDeleteSessionResponses[keyof DeprecatedDeleteSessionResponses];

export type DeprecatedGetSessionData = {
  body?: never;
  path: {
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}";
};

export type DeprecatedGetSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedGetSessionError =
  DeprecatedGetSessionErrors[keyof DeprecatedGetSessionErrors];

export type DeprecatedGetSessionResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type DeprecatedGetSessionResponse =
  DeprecatedGetSessionResponses[keyof DeprecatedGetSessionResponses];

export type DeprecatedUpdateSessionData = {
  body: UpdateSessionParams;
  path: {
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}";
};

export type DeprecatedUpdateSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedUpdateSessionError =
  DeprecatedUpdateSessionErrors[keyof DeprecatedUpdateSessionErrors];

export type DeprecatedUpdateSessionResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type DeprecatedUpdateSessionResponse =
  DeprecatedUpdateSessionResponses[keyof DeprecatedUpdateSessionResponses];

export type DeprecatedCreateSessionData = {
  body: CreateSessionParams;
  path?: never;
  query?: never;
  url: "/session";
};

export type DeprecatedCreateSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedCreateSessionError =
  DeprecatedCreateSessionErrors[keyof DeprecatedCreateSessionErrors];

export type DeprecatedCreateSessionResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type DeprecatedCreateSessionResponse =
  DeprecatedCreateSessionResponses[keyof DeprecatedCreateSessionResponses];

export type DeprecatedClearSessionData = {
  body?: never;
  path: {
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}/clear";
};

export type DeprecatedClearSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedClearSessionError =
  DeprecatedClearSessionErrors[keyof DeprecatedClearSessionErrors];

export type DeprecatedClearSessionResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type DeprecatedClearSessionResponse =
  DeprecatedClearSessionResponses[keyof DeprecatedClearSessionResponses];

export type DeprecatedChatData = {
  body: ChatParamsSingleMessage | ChatParamsMultiMessages;
  path?: never;
  query?: never;
  url: "/chat";
};

export type DeprecatedChatErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedChatError =
  DeprecatedChatErrors[keyof DeprecatedChatErrors];

export type DeprecatedChatResponses = {
  /**
   * Successful Response
   */
  200: ChatResponse;
};

export type DeprecatedChatResponse =
  DeprecatedChatResponses[keyof DeprecatedChatResponses];

export type DeprecatedChatCompletionsData = {
  body: CompletionParams;
  path?: never;
  query?: never;
  url: "/chat/completions";
};

export type DeprecatedChatCompletionsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedChatCompletionsError =
  DeprecatedChatCompletionsErrors[keyof DeprecatedChatCompletionsErrors];

export type DeprecatedChatCompletionsResponses = {
  /**
   * Successful Response
   */
  200: CompletionResponse;
};

export type DeprecatedChatCompletionsResponse =
  DeprecatedChatCompletionsResponses[keyof DeprecatedChatCompletionsResponses];

export type DeprecatedExecuteData = {
  body: ChatParamsSingleMessage | ChatParamsMultiMessages;
  path?: never;
  query?: never;
  url: "/execute";
};

export type DeprecatedExecuteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedExecuteError =
  DeprecatedExecuteErrors[keyof DeprecatedExecuteErrors];

export type DeprecatedExecuteResponses = {
  /**
   * Successful Response
   */
  200: ChatResponse;
};

export type DeprecatedExecuteResponse =
  DeprecatedExecuteResponses[keyof DeprecatedExecuteResponses];

export type FeedbackData = {
  body: FeedbackParams;
  path?: never;
  query?: never;
  url: "/feedback";
};

export type FeedbackErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type FeedbackError = FeedbackErrors[keyof FeedbackErrors];

export type FeedbackResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelFeedback;
};

export type FeedbackResponse = FeedbackResponses[keyof FeedbackResponses];

export type GetModelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/models";
};

export type GetModelsResponses = {
  /**
   * Successful Response
   */
  200: ModelResponse;
};

export type GetModelsResponse = GetModelsResponses[keyof GetModelsResponses];

export type GetAuthDelegatePayloadData = {
  body: GetPayloadParams;
  path?: never;
  query?: never;
  url: "/auth/delegate/payload";
};

export type GetAuthDelegatePayloadErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAuthDelegatePayloadError =
  GetAuthDelegatePayloadErrors[keyof GetAuthDelegatePayloadErrors];

export type GetAuthDelegatePayloadResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelGetPayloadResponse;
};

export type GetAuthDelegatePayloadResponse =
  GetAuthDelegatePayloadResponses[keyof GetAuthDelegatePayloadResponses];

export type AuthDelegateLoginData = {
  body: LoginParams;
  path?: never;
  query?: never;
  url: "/auth/delegate/login";
};

export type AuthDelegateLoginErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthDelegateLoginError =
  AuthDelegateLoginErrors[keyof AuthDelegateLoginErrors];

export type AuthDelegateLoginResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelLoginResponse;
};

export type AuthDelegateLoginResponse =
  AuthDelegateLoginResponses[keyof AuthDelegateLoginResponses];

export type VerifyAuthData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/verify";
};

export type VerifyAuthResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelVerifyJwtResponse;
};

export type VerifyAuthResponse = VerifyAuthResponses[keyof VerifyAuthResponses];

export type GetUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/user";
};

export type GetUserResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUserResponse;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type GetUserWalletsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/user/wallets";
};

export type GetUserWalletsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListUserWalletResponse;
};

export type GetUserWalletsResponse =
  GetUserWalletsResponses[keyof GetUserWalletsResponses];

export type DeleteUserWalletData = {
  body?: never;
  path: {
    wallet_id: string;
  };
  query?: never;
  url: "/user/wallet/{wallet_id}";
};

export type DeleteUserWalletErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteUserWalletError =
  DeleteUserWalletErrors[keyof DeleteUserWalletErrors];

export type DeleteUserWalletResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetUserWalletData = {
  body?: never;
  path: {
    wallet_id: string;
  };
  query?: never;
  url: "/user/wallet/{wallet_id}";
};

export type GetUserWalletErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetUserWalletError = GetUserWalletErrors[keyof GetUserWalletErrors];

export type GetUserWalletResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUserWalletResponse;
};

export type GetUserWalletResponse =
  GetUserWalletResponses[keyof GetUserWalletResponses];

export type UpdateUserWalletData = {
  body: UpdateUserWalletParams;
  path: {
    wallet_id: string;
  };
  query?: never;
  url: "/user/wallet/{wallet_id}";
};

export type UpdateUserWalletErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateUserWalletError =
  UpdateUserWalletErrors[keyof UpdateUserWalletErrors];

export type UpdateUserWalletResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type CreateUserWalletData = {
  body: CreateUserWalletParams;
  path?: never;
  query?: never;
  url: "/user/wallet";
};

export type CreateUserWalletErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateUserWalletError =
  CreateUserWalletErrors[keyof CreateUserWalletErrors];

export type CreateUserWalletResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetAgentsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/agents";
};

export type GetAgentsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListAgentListResponse;
};

export type GetAgentsResponse = GetAgentsResponses[keyof GetAgentsResponses];

export type DeleteAgentData = {
  body?: never;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}";
};

export type DeleteAgentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteAgentError = DeleteAgentErrors[keyof DeleteAgentErrors];

export type DeleteAgentResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteAgentResponse =
  DeleteAgentResponses[keyof DeleteAgentResponses];

export type GetAgentData = {
  body?: never;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}";
};

export type GetAgentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentError = GetAgentErrors[keyof GetAgentErrors];

export type GetAgentResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentResponse;
};

export type GetAgentResponse = GetAgentResponses[keyof GetAgentResponses];

export type UpdateAgentData = {
  body: UpdateAgentHandlerParams;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}";
};

export type UpdateAgentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateAgentError = UpdateAgentErrors[keyof UpdateAgentErrors];

export type UpdateAgentResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentResponse;
};

export type UpdateAgentResponse =
  UpdateAgentResponses[keyof UpdateAgentResponses];

export type CreateAgentData = {
  body: CreateAgentHandlerParams;
  path?: never;
  query?: never;
  url: "/agent";
};

export type CreateAgentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateAgentError = CreateAgentErrors[keyof CreateAgentErrors];

export type CreateAgentResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentResponse;
};

export type CreateAgentResponse =
  CreateAgentResponses[keyof CreateAgentResponses];

export type DeleteAgentTriggerData = {
  body?: never;
  path: {
    agent_id: string;
    trigger_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger/{trigger_id}";
};

export type DeleteAgentTriggerErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteAgentTriggerError =
  DeleteAgentTriggerErrors[keyof DeleteAgentTriggerErrors];

export type DeleteAgentTriggerResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteAgentTriggerResponse =
  DeleteAgentTriggerResponses[keyof DeleteAgentTriggerResponses];

export type GetAgentTriggerData = {
  body?: never;
  path: {
    agent_id: string;
    trigger_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger/{trigger_id}";
};

export type GetAgentTriggerErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentTriggerError =
  GetAgentTriggerErrors[keyof GetAgentTriggerErrors];

export type GetAgentTriggerResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentTriggerResponse;
};

export type GetAgentTriggerResponse =
  GetAgentTriggerResponses[keyof GetAgentTriggerResponses];

export type UpdateAgentTriggerData = {
  body: UpdateAgentTriggerParams;
  path: {
    agent_id: string;
    trigger_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger/{trigger_id}";
};

export type UpdateAgentTriggerErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateAgentTriggerError =
  UpdateAgentTriggerErrors[keyof UpdateAgentTriggerErrors];

export type UpdateAgentTriggerResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentTriggerResponse;
};

export type UpdateAgentTriggerResponse =
  UpdateAgentTriggerResponses[keyof UpdateAgentTriggerResponses];

export type CreateAgentTriggerData = {
  body: CreateAgentTriggerParams;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger";
};

export type CreateAgentTriggerErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateAgentTriggerError =
  CreateAgentTriggerErrors[keyof CreateAgentTriggerErrors];

export type CreateAgentTriggerResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentTriggerResponse;
};

export type CreateAgentTriggerResponse =
  CreateAgentTriggerResponses[keyof CreateAgentTriggerResponses];

export type DeleteAgentToolData = {
  body?: never;
  path: {
    agent_id: string;
    tool_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool/{tool_id}";
};

export type DeleteAgentToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteAgentToolError =
  DeleteAgentToolErrors[keyof DeleteAgentToolErrors];

export type DeleteAgentToolResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteAgentToolResponse =
  DeleteAgentToolResponses[keyof DeleteAgentToolResponses];

export type GetAgentToolData = {
  body?: never;
  path: {
    agent_id: string;
    tool_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool/{tool_id}";
};

export type GetAgentToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentToolError = GetAgentToolErrors[keyof GetAgentToolErrors];

export type GetAgentToolResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentToolResponse;
};

export type GetAgentToolResponse =
  GetAgentToolResponses[keyof GetAgentToolResponses];

export type UpdateAgentToolData = {
  body: UpdateAgentToolParams;
  path: {
    agent_id: string;
    tool_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool/{tool_id}";
};

export type UpdateAgentToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateAgentToolError =
  UpdateAgentToolErrors[keyof UpdateAgentToolErrors];

export type UpdateAgentToolResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentToolResponse;
};

export type UpdateAgentToolResponse =
  UpdateAgentToolResponses[keyof UpdateAgentToolResponses];

export type CreateAgentToolData = {
  body: CreateAgentToolParams;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool";
};

export type CreateAgentToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateAgentToolError =
  CreateAgentToolErrors[keyof CreateAgentToolErrors];

export type CreateAgentToolResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentToolResponse;
};

export type CreateAgentToolResponse =
  CreateAgentToolResponses[keyof CreateAgentToolResponses];

export type GetAgentWalletsData = {
  body?: never;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/wallets";
};

export type GetAgentWalletsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentWalletsError =
  GetAgentWalletsErrors[keyof GetAgentWalletsErrors];

export type GetAgentWalletsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListAgentWalletResponse;
};

export type GetAgentWalletsResponse =
  GetAgentWalletsResponses[keyof GetAgentWalletsResponses];

export type GetAgentWalletData = {
  body?: never;
  path: {
    agent_id: string;
    wallet_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/wallet/{wallet_id}";
};

export type GetAgentWalletErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentWalletError =
  GetAgentWalletErrors[keyof GetAgentWalletErrors];

export type GetAgentWalletResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentWalletResponse;
};

export type GetAgentWalletResponse =
  GetAgentWalletResponses[keyof GetAgentWalletResponses];

export type GetConversationsData = {
  body?: never;
  path?: never;
  query?: {
    agent_id?: string | null;
  };
  url: "/conversations";
};

export type GetConversationsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetConversationsError =
  GetConversationsErrors[keyof GetConversationsErrors];

export type GetConversationsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListConversationListResponse;
};

export type GetConversationsResponse =
  GetConversationsResponses[keyof GetConversationsResponses];

export type DeleteConversationData = {
  body?: never;
  path: {
    conversation_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}";
};

export type DeleteConversationErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteConversationError =
  DeleteConversationErrors[keyof DeleteConversationErrors];

export type DeleteConversationResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteConversationResponse =
  DeleteConversationResponses[keyof DeleteConversationResponses];

export type GetConversationData = {
  body?: never;
  path: {
    conversation_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}";
};

export type GetConversationErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetConversationError =
  GetConversationErrors[keyof GetConversationErrors];

export type GetConversationResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationResponseReadable;
};

export type GetConversationResponse =
  GetConversationResponses[keyof GetConversationResponses];

export type UpdateConversationData = {
  body: UpdateConversationHandlerParams;
  path: {
    conversation_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}";
};

export type UpdateConversationErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateConversationError =
  UpdateConversationErrors[keyof UpdateConversationErrors];

export type UpdateConversationResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationResponseReadable;
};

export type UpdateConversationResponse =
  UpdateConversationResponses[keyof UpdateConversationResponses];

export type CreateConversationData = {
  body: CreateConversationHandlerParams;
  path?: never;
  query?: never;
  url: "/conversation";
};

export type CreateConversationErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateConversationError =
  CreateConversationErrors[keyof CreateConversationErrors];

export type CreateConversationResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationResponseReadable;
};

export type CreateConversationResponse =
  CreateConversationResponses[keyof CreateConversationResponses];

export type CreateConversationMessageData = {
  body: CreateMessageHandlerParams;
  path: {
    conversation_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}/message";
};

export type CreateConversationMessageErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateConversationMessageError =
  CreateConversationMessageErrors[keyof CreateConversationMessageErrors];

export type CreateConversationMessageResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationMessageResponseReadable;
};

export type CreateConversationMessageResponse =
  CreateConversationMessageResponses[keyof CreateConversationMessageResponses];

export type UpdateConversationMessageData = {
  body: UpdateMessageHandlerParams;
  path: {
    conversation_id: string;
    message_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}/message/{message_id}";
};

export type UpdateConversationMessageErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateConversationMessageError =
  UpdateConversationMessageErrors[keyof UpdateConversationMessageErrors];

export type UpdateConversationMessageResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationMessageResponseReadable;
};

export type UpdateConversationMessageResponse =
  UpdateConversationMessageResponses[keyof UpdateConversationMessageResponses];

export type GetRegistryAgentsData = {
  body?: RegistryAgentListRequest | null;
  path?: never;
  query?: never;
  url: "/registry/agents";
};

export type GetRegistryAgentsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetRegistryAgentsError =
  GetRegistryAgentsErrors[keyof GetRegistryAgentsErrors];

export type GetRegistryAgentsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListRegistryAgentListResponse;
};

export type GetRegistryAgentsResponse =
  GetRegistryAgentsResponses[keyof GetRegistryAgentsResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:4242" | (string & {});
};
