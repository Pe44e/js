// This file is auto-generated by @hey-api/openapi-ts

export type AbiDocFormatted = {
  abi: {
    [key: string]: unknown;
  };
  abi_inputs_parameters_description: {
    [key: string]: string;
  } | null;
  abi_inputs_description: string | null;
  abi_outputs_parameters_description: {
    [key: string]: string;
  } | null;
  function_description: string | null;
  function_signature: string;
  full_signature: string;
};

export type AgentActionContext = {
  type?: "context";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: CompletionContextOutput | string;
};

export type AgentActionEval = {
  type?: "eval";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: string;
};

export type AgentActionExecution = {
  type?: "execution";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: AgentTransactionExecution;
};

export type AgentActionImage = {
  type?: "image";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: AgentActionImageData;
};

export type AgentActionImageData = {
  url: string;
  width: number;
  height: number;
};

export type AgentActionInit = {
  type?: "init";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data?: null;
};

export type AgentActionPresence = {
  type?: "presence";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: string;
};

export type AgentActionSignSwap = {
  type?: "sign_swap";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: AgentActionSignSwapData | string;
};

export type AgentActionSignSwapData = {
  transaction: AgentActionSignTransactionData;
  action: string | null;
  intent: AgentActionSignSwapDataIntent;
  from: AgentActionSignSwapDataToken;
  to: AgentActionSignSwapDataToken;
};

export type AgentActionSignSwapDataIntent = {
  originChainId: number;
  originTokenAddress: string;
  destinationChainId: number;
  destinationTokenAddress: string;
  amount: string;
  sender: string;
  receiver: string;
  maxSteps: number;
};

export type AgentActionSignSwapDataToken = {
  address: string;
  chain_id: number;
  amount: string;
  symbol: string;
  decimals: number;
  price: number | null;
};

export type AgentActionSignTransaction = {
  type?: "sign_transaction";
  session_id: string;
  request_id: string;
  source?: string;
  tool_name?: string | null;
  description?: string | null;
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: AgentActionSignTransactionData | string;
};

export type AgentActionSignTransactionData = {
  chainId: number;
  function: string;
  to: string;
  value: string;
  data: string;
};

export type AgentListResponse = {
  id: string;
  name: string;
  created_at: string;
  updated_at: string;
};

export type AgentMemoryResponse = {
  id: string;
};

export type AgentResponse = {
  id: string;
  name: string;
  description?: string | null;
  model_name: string;
  is_public: boolean;
  context: AgentTaskContext;
  prompts?: Array<ChatMessage>;
  tools?: Array<AgentToolResponse>;
  triggers?: Array<AgentTriggerResponse>;
  memories?: Array<AgentMemoryResponse>;
  wallets?: Array<AgentWalletResponse>;
  created_at: string;
  updated_at: string;
};

export type AgentStep = {
  type: unknown;
};

export type AgentTaskContext = {
  chain_ids?: Array<number> | null;
  chain_type?: "all" | "mainnet" | "testnet";
  automatic_execution?: boolean;
};

export type AgentTaskOptions = {
  temperature?: number | null;
  max_tokens?: number | null;
  seed?: number | null;
};

export type AgentToolDataMcp = {
  type: "mcp";
  config: McpConfig;
};

export type AgentToolResponse = {
  id: string;
  name: string | null;
  description: string | null;
  data: {
    type: "mcp";
  } & AgentToolDataMcp;
  created_at: string;
  updated_at: string;
};

export type AgentTransaction = {
  action: string;
  transactions: Array<AgentTransactionDataTransaction>;
  simulation?: AgentTransactionDataSimulation | null;
  description?: string | null;
};

export type AgentTransactionDataSimulation = {
  success: boolean;
  message: string;
  chains: Array<AgentTransactionDataSimulationChain>;
  contracts?: Array<AgentTransactionDataSimulationContract> | null;
  tokens?: Array<AgentTransactionDataSimulationToken> | null;
};

export type AgentTransactionDataSimulationChain = {
  chain_id: number;
  name: string;
};

export type AgentTransactionDataSimulationContract = {
  chain_id: number;
  address: string;
  name: string;
  type: "call" | "create";
  function_name?: string | null;
  function_args?: {
    [key: string]: unknown;
  } | null;
};

export type AgentTransactionDataSimulationToken = {
  chain_id: number;
  address: string;
  name: string;
  symbol: string;
  decimals: number;
  amount: number;
};

export type AgentTransactionDataTransaction = {
  to: string;
  value: string;
  data: string;
  chain_id: number;
};

export type AgentTransactionExecution = {
  id: string;
  wallet_address: string;
  chain_id: number;
  status: "pending" | "confirmed" | "failed";
  transaction_hash?: string | null;
  error_message?: string | null;
  transactions?: Array<AgentTransactionDataTransaction> | null;
};

export type AgentTriggerData = {
  type: unknown;
};

export type AgentTriggerDataContinuous = {
  type?: "continuous";
};

export type AgentTriggerDataTime = {
  type?: "time";
  cron_expression?: string | null;
};

export type AgentTriggerResponse = {
  id: string;
  name: string;
  type: AgentTriggerType;
  data: AgentTriggerData;
  prompts: Array<ChatMessage>;
  is_paused: boolean;
  created_at: string;
  updated_at: string;
};

export type AgentTriggerType = "continuous" | "time";

export type AgentWalletResponse = {
  id: string;
  type: WalletType;
  address: string;
  data:
    | ({
        type: "server";
      } & WalletDataServer)
    | ({
        type: "eip4337";
      } & WalletDataEip4337);
  transactions: Array<WalletTransaction>;
  created_at: string;
  updated_at: string;
};

/**
 * Base class for all blockchain entities tracked in memory.
 */
export type BlockchainEntity = {
  chain_id: number;
  address: string;
  roles?: Array<EntityRole>;
  first_mentioned_at?: string;
  last_mentioned_at?: string;
};

export type ChatContentImage = {
  type?: "image";
  image_url?: string | null;
  b64?: string | null;
};

export type ChatContentText = {
  type?: "text";
  text: string;
};

export type ChatContentTransaction = {
  type?: "transaction";
  chain_id: number;
  transaction_hash: string;
};

export type ChatMessage = {
  role: "system" | "user" | "assistant";
  content:
    | string
    | Array<
        | ({
            type: "image";
          } & ChatContentImage)
        | ({
            type: "text";
          } & ChatContentText)
        | ({
            type: "transaction";
          } & ChatContentTransaction)
      >;
};

export type ChatParamsMultiMessages = {
  stream?: boolean | null;
  model_name?: string | null;
  session_id?: string | null;
  config?: ExecuteConfig | null;
  execute_config?: ExecuteConfig | null;
  context_filter?: ContextFilterInput | null;
  context?: CompletionContextInput | null;
  max_tokens?: number | null;
  max_completion_tokens?: number | null;
  frequency_penalty?: number | null;
  presence_penalty?: number | null;
  temperature?: number | null;
  top_p?: number | null;
  response_format?:
    | (
        | ({
            type: "json_object";
          } & CompletionResponseFormatJsonObject)
        | ({
            type: "json_schema";
          } & CompletionResponseFormatJsonSchema)
      )
    | null;
  messages: Array<ChatMessage>;
};

export type ChatParamsSingleMessage = {
  stream?: boolean | null;
  model_name?: string | null;
  session_id?: string | null;
  config?: ExecuteConfig | null;
  execute_config?: ExecuteConfig | null;
  context_filter?: ContextFilterInput | null;
  context?: CompletionContextInput | null;
  max_tokens?: number | null;
  max_completion_tokens?: number | null;
  frequency_penalty?: number | null;
  presence_penalty?: number | null;
  temperature?: number | null;
  top_p?: number | null;
  response_format?:
    | (
        | ({
            type: "json_object";
          } & CompletionResponseFormatJsonObject)
        | ({
            type: "json_schema";
          } & CompletionResponseFormatJsonSchema)
      )
    | null;
  message: string;
};

export type ChatResponse = {
  message: string;
  actions: Array<
    | ({
        type: "init";
      } & AgentActionInit)
    | ({
        type: "eval";
      } & AgentActionEval)
    | ({
        type: "presence";
      } & AgentActionPresence)
    | ({
        type: "context";
      } & AgentActionContext)
    | ({
        type: "image";
      } & AgentActionImage)
    | ({
        type: "execution";
      } & AgentActionExecution)
    | ({
        type: "sign_transaction";
      } & AgentActionSignTransaction)
    | ({
        type: "sign_swap";
      } & AgentActionSignSwap)
  > | null;
  session_id: string | null;
  request_id: string | null;
};

export type CompletionChoice = {
  message: CompletionChoiceChatMessage;
  finish_reason: "stop" | "length";
  index: number;
};

export type CompletionChoiceChatMessage = {
  role: "user" | "assistant";
  content: string;
};

export type CompletionContextInput = {
  session_id?: string | null;
  wallet_address?:
    | string
    | ({
        type: "server_wallet";
      } & ContextFilterServerWallet)
    | null;
  chain_ids?: Array<number> | null;
  mcp_tools?: Array<McpTool> | null;
  networks?: "all" | "mainnet" | "testnet";
  entities?: {
    [key: string]: BlockchainEntity;
  };
  deployed_contracts?: Array<ContractBase>;
  prompts?: Array<ChatMessage>;
};

export type CompletionContextOutput = {
  session_id?: string | null;
  wallet_address?:
    | string
    | ({
        type: "server_wallet";
      } & ContextFilterServerWallet)
    | null;
  chain_ids?: Array<number> | null;
  mcp_tools?: Array<McpTool> | null;
  networks?: "all" | "mainnet" | "testnet";
};

export type CompletionParams = {
  messages: Array<ChatMessage>;
  model?: string | null;
  stream?: boolean;
  max_tokens?: number | null;
  max_completion_tokens?: number | null;
  frequency_penalty?: number | null;
  presence_penalty?: number | null;
  temperature?: number | null;
  top_p?: number | null;
  response_format?:
    | (
        | ({
            type: "json_object";
          } & CompletionResponseFormatJsonObject)
        | ({
            type: "json_schema";
          } & CompletionResponseFormatJsonSchema)
      )
    | null;
  context?: CompletionContextInput | null;
};

export type CompletionResponse = {
  id: string;
  choices: Array<CompletionChoice>;
  created: number;
  object: "chat.completion";
  usage: CompletionUsage;
  actions: Array<
    | ({
        type: "init";
      } & AgentActionInit)
    | ({
        type: "eval";
      } & AgentActionEval)
    | ({
        type: "presence";
      } & AgentActionPresence)
    | ({
        type: "context";
      } & AgentActionContext)
    | ({
        type: "image";
      } & AgentActionImage)
    | ({
        type: "execution";
      } & AgentActionExecution)
    | ({
        type: "sign_transaction";
      } & AgentActionSignTransaction)
    | ({
        type: "sign_swap";
      } & AgentActionSignSwap)
  > | null;
  context: CompletionContextOutput | null;
};

export type CompletionResponseFormatJsonObject = {
  type: "json_object";
};

export type CompletionResponseFormatJsonSchema = {
  type: "json_schema";
  json_schema: {
    [key: string]: unknown;
  };
};

export type CompletionUsage = {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
};

export type ContextFilterInput = {
  chain_ids?: Array<string> | null;
  wallet_addresses?: Array<string> | null;
  networks?: "all" | "mainnet" | "testnet";
  wallet?:
    | string
    | ({
        type: "server_wallet";
      } & ContextFilterServerWallet)
    | null;
  mcp_tools?: Array<McpTool> | null;
  prompts?: Array<ChatMessage> | null;
};

export type ContextFilterOutput = {
  chain_ids?: Array<string> | null;
  wallet_addresses?: Array<string> | null;
  networks?: "all" | "mainnet" | "testnet";
  wallet?:
    | string
    | ({
        type: "server_wallet";
      } & ContextFilterServerWallet)
    | null;
  mcp_tools?: Array<McpTool> | null;
  prompts?: Array<ChatMessage> | null;
};

export type ContextFilterServerWallet = {
  type: "server_wallet";
  server_wallet_id?: string | null;
  server_wallet_address?: string | null;
};

/**
 * Base class for contract-like entities that can be processed by ContractMetadata.
 */
export type ContractBase = {
  chain_id: number;
  address: string;
  roles?: Array<EntityRole>;
  first_mentioned_at?: string;
  last_mentioned_at?: string;
  name?: string | null;
  symbol?: string | null;
  standard?: ("ERC20" | "ERC721" | "ERC1155" | "Unknown") | null;
  description?: string | null;
  total_supply?: number | null;
  price?: string | null;
  abi?: Array<AbiDocFormatted> | null;
  deployment_status?: DeploymentStatus;
};

export type ConversationListResponse = {
  id: string;
};

export type ConversationMessageResponse = {
  id: string;
};

export type ConversationResponse = {
  id: string;
};

/**
 * inherits from CreateAgentParams, but adds triggers and tools
 */
export type CreateAgentHandlerParams = {
  name: string;
  description?: string | null;
  is_public?: boolean | null;
  prompts?: Array<ChatMessage> | null;
  triggers?: Array<CreateAgentTriggerParams> | null;
  tools?: Array<CreateAgentToolParams> | null;
};

export type CreateAgentToolParams = {
  name: string;
  data: {
    type: "mcp";
  } & AgentToolDataMcp;
  description?: string | null;
};

export type CreateAgentTriggerParams = {
  name: string;
  data:
    | ({
        type: "continuous";
      } & AgentTriggerDataContinuous)
    | ({
        type: "time";
      } & AgentTriggerDataTime);
  prompts?: Array<ChatMessage> | null;
};

export type CreateConversationHandlerParams = {
  title?: string | null;
  is_public?: boolean | null;
  agent_id: string;
  message?: CreateMessageHandlerParams | null;
};

export type CreateMessageHandlerParams = {
  inputs: Array<ChatMessage>;
  options?: AgentTaskOptions | null;
  context?: AgentTaskContext | null;
};

export type CreateSessionParams = {
  model_name?: string;
  title?: string | null;
  is_public?: boolean | null;
  context?: CompletionContextInput | null;
  execute_config?: ExecuteConfig | null;
  context_filter?: ContextFilterInput | null;
};

export type CreateUserWalletParams = {
  type: WalletType;
  data?: WalletDataServer | WalletDataEip4337 | null;
};

export type DeploymentStatus = "unknown" | "pending" | "deployed" | "failed";

export type EntityRole = "mentioned" | "deployed" | "user";

export type ExecuteConfig = {
  mode?: ("client" | "engine" | "session_key") | null;
  signer_wallet_address?: string | null;
  engine_url?: string | null;
  engine_authorization_token?: string | null;
  engine_backend_wallet_address?: string | null;
  smart_account_address?: string | null;
  smart_account_factory_address?: string | null;
  smart_account_session_key?: string | null;
};

export type Feedback = {
  id: string;
  session_id: string;
  request_id: string;
  feedback_rating: number | null;
  feedback_response: string | null;
  comment: string | null;
  created_at: string | null;
  updated_at: string | null;
};

export type FeedbackParams = {
  session_id: string;
  request_id: string;
  feedback_rating?: number | null;
  feedback_response?: string | null;
  comment?: string | null;
};

export type GetPayloadParams = {
  address: string;
  chain_id?: number | string | null;
};

export type GetPayloadResponse = {
  payload: Payload;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type LoginParams = {
  payload: Payload;
  signature?: string | null;
  token?: string | null;
};

export type LoginResponse = {
  token: string;
};

export type McpConfig = {
  url: string;
  headers?: {
    [key: string]: unknown;
  } | null;
};

export type McpTool = {
  url: string;
  headers?: {
    [key: string]: string;
  } | null;
};

export type Model = {
  id: string;
  object: "model";
  created: number;
  owned_by: "thirdweb";
};

export type ModelResponse = {
  object: "list";
  data: Array<Model>;
};

export type Payload = {
  address: string;
  chain_id: number | null;
  domain: string;
  expiration_time: string;
  invalid_before: string;
  issued_at: string;
  nonce: string;
  statement: string;
  version: string;
  resources: Array<string> | null;
  uri: string;
};

export type ResponseModelAgentResponse = {
  result: AgentResponse;
};

export type ResponseModelAgentToolResponse = {
  result: AgentToolResponse;
};

export type ResponseModelAgentTriggerResponse = {
  result: AgentTriggerResponse;
};

export type ResponseModelAgentWalletResponse = {
  result: AgentWalletResponse;
};

export type ResponseModelConversationMessageResponse = {
  result: ConversationMessageResponse;
};

export type ResponseModelConversationResponse = {
  result: ConversationResponse;
};

export type ResponseModelFeedback = {
  result: Feedback;
};

export type ResponseModelGetPayloadResponse = {
  result: GetPayloadResponse;
};

export type ResponseModelLoginResponse = {
  result: LoginResponse;
};

export type ResponseModelSessionDeleteResponse = {
  result: SessionDeleteResponse;
};

export type ResponseModelSession = {
  result: Session;
};

export type ResponseModelUuid = {
  result: string;
};

export type ResponseModelUserResponse = {
  result: UserResponse;
};

export type ResponseModelUserWalletResponse = {
  result: UserWalletResponse;
};

export type ResponseModelVerifyJwtResponse = {
  result: VerifyJwtResponse;
};

export type ResponseModelListAgentListResponse = {
  result: Array<AgentListResponse>;
};

export type ResponseModelListAgentWalletResponse = {
  result: Array<AgentWalletResponse>;
};

export type ResponseModelListConversationListResponse = {
  result: Array<ConversationListResponse>;
};

export type ResponseModelListSessionList = {
  result: Array<SessionList>;
};

export type ResponseModelListUserWalletResponse = {
  result: Array<UserWalletResponse>;
};

export type Session = {
  id: string;
  team_id: string;
  project_id: string | null;
  model_name: string;
  is_public: boolean | null;
  title: string | null;
  memory: Array<{
    [key: string]: unknown;
  }> | null;
  history: Array<{
    [key: string]: unknown;
  }> | null;
  action: Array<{
    [key: string]: unknown;
  }> | null;
  context?: CompletionContextOutput | null;
  archive_at: string | null;
  deleted_at: string | null;
  created_at: string | null;
  updated_at: string | null;
  execute_config?: ExecuteConfig | null;
  context_filter?: ContextFilterOutput | null;
};

export type SessionDeleteResponse = {
  id: string;
  deleted_at: string;
};

export type SessionList = {
  id: string;
  title: string | null;
  created_at: string;
  updated_at: string;
};

export type TransactionParams = {
  to: string;
  value: string;
  data: string;
};

export type UpdateAgentHandlerParams = {
  name?: string | null;
  description?: string | null;
  is_public?: boolean | null;
  prompts?: Array<ChatMessage> | null;
};

export type UpdateAgentToolParams = {
  name?: string | null;
  data?:
    | ({
        type: "mcp";
      } & AgentToolDataMcp)
    | null;
  description?: string | null;
};

export type UpdateAgentTriggerParams = {
  name?: string | null;
  data?:
    | (
        | ({
            type: "continuous";
          } & AgentTriggerDataContinuous)
        | ({
            type: "time";
          } & AgentTriggerDataTime)
      )
    | null;
  is_paused?: boolean | null;
  prompts?: Array<ChatMessage> | null;
};

export type UpdateConversationHandlerParams = {
  title?: string | null;
  is_public?: boolean | null;
};

export type UpdateMessageHandlerParams = {
  inputs?: Array<ChatMessage> | null;
  options?: AgentTaskOptions | null;
  responses?: Array<ChatMessage> | null;
  steps?: Array<AgentStep> | null;
  transactions?: Array<AgentTransaction> | null;
  started_at?: string | null;
  completed_at?: string | null;
  error_count?: number | null;
};

export type UpdateSessionParams = {
  title?: string | null;
  model_name?: string | null;
  is_public?: boolean | null;
  context?: CompletionContextInput | null;
  execute_config?: ExecuteConfig | null;
  context_filter?: ContextFilterInput | null;
};

export type UpdateUserWalletParams = {
  type?: WalletType | null;
  data?: WalletDataServer | WalletDataEip4337 | null;
};

export type UserAgentResponse = {
  id: string;
  name: string;
  description?: string | null;
  created_at: string;
  updated_at: string;
};

export type UserConversationResponse = {
  id: string;
  title: string;
  created_at: string;
  updated_at: string;
};

export type UserMemoryResponse = {
  id: string;
};

export type UserResponse = {
  id: string;
  agents: Array<UserAgentResponse>;
  memories: Array<UserMemoryResponse>;
  conversations: Array<UserConversationResponse>;
  wallets: Array<UserWalletResponse>;
};

export type UserWalletResponse = {
  id: string;
  type: WalletType;
  address: string;
  data:
    | ({
        type: "server";
      } & WalletDataServer)
    | ({
        type: "eip4337";
      } & WalletDataEip4337);
  transactions: Array<WalletTransaction>;
  created_at: string;
  updated_at: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type VerifyJwtResponse = {
  address: string;
  is_valid: boolean;
};

export type WalletDataEip4337 = {
  type?: "eip4337";
  signer_address: string;
  factory_address: string;
  smart_account_address: string;
  entrypoint_address: string;
  sponsor_gas?: boolean;
  chain_ids?: Array<number> | null;
};

export type WalletDataServer = {
  type?: "server";
  smart_account_address: string;
};

export type WalletTransaction = {
  id: string;
  chain_id: number;
  params: Array<TransactionParams>;
  hash: string | null;
  submitted_at: string | null;
  cancelled_at: string | null;
  errored_at: string | null;
  error_message: string | null;
  created_at: string;
  updated_at: string;
};

export type WalletType = "eoa" | "server" | "eip4337" | "eip7702";

export type GetSessionListSessionListGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/session/list";
};

export type GetSessionListSessionListGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListSessionList;
};

export type GetSessionListSessionListGetResponse =
  GetSessionListSessionListGetResponses[keyof GetSessionListSessionListGetResponses];

export type DeleteSessionSessionSessionIdDeleteData = {
  body?: never;
  path: {
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}";
};

export type DeleteSessionSessionSessionIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteSessionSessionSessionIdDeleteError =
  DeleteSessionSessionSessionIdDeleteErrors[keyof DeleteSessionSessionSessionIdDeleteErrors];

export type DeleteSessionSessionSessionIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSessionDeleteResponse;
};

export type DeleteSessionSessionSessionIdDeleteResponse =
  DeleteSessionSessionSessionIdDeleteResponses[keyof DeleteSessionSessionSessionIdDeleteResponses];

export type GetSessionSessionSessionIdGetData = {
  body?: never;
  path: {
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}";
};

export type GetSessionSessionSessionIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetSessionSessionSessionIdGetError =
  GetSessionSessionSessionIdGetErrors[keyof GetSessionSessionSessionIdGetErrors];

export type GetSessionSessionSessionIdGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type GetSessionSessionSessionIdGetResponse =
  GetSessionSessionSessionIdGetResponses[keyof GetSessionSessionSessionIdGetResponses];

export type UpdateSessionSessionSessionIdPutData = {
  body: UpdateSessionParams;
  path: {
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}";
};

export type UpdateSessionSessionSessionIdPutErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateSessionSessionSessionIdPutError =
  UpdateSessionSessionSessionIdPutErrors[keyof UpdateSessionSessionSessionIdPutErrors];

export type UpdateSessionSessionSessionIdPutResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type UpdateSessionSessionSessionIdPutResponse =
  UpdateSessionSessionSessionIdPutResponses[keyof UpdateSessionSessionSessionIdPutResponses];

export type CreateSessionSessionPostData = {
  body: CreateSessionParams;
  path?: never;
  query?: never;
  url: "/session";
};

export type CreateSessionSessionPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateSessionSessionPostError =
  CreateSessionSessionPostErrors[keyof CreateSessionSessionPostErrors];

export type CreateSessionSessionPostResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type CreateSessionSessionPostResponse =
  CreateSessionSessionPostResponses[keyof CreateSessionSessionPostResponses];

export type ClearSessionSessionSessionIdClearPostData = {
  body?: never;
  path: {
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}/clear";
};

export type ClearSessionSessionSessionIdClearPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ClearSessionSessionSessionIdClearPostError =
  ClearSessionSessionSessionIdClearPostErrors[keyof ClearSessionSessionSessionIdClearPostErrors];

export type ClearSessionSessionSessionIdClearPostResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type ClearSessionSessionSessionIdClearPostResponse =
  ClearSessionSessionSessionIdClearPostResponses[keyof ClearSessionSessionSessionIdClearPostResponses];

export type ChatChatPostData = {
  body: ChatParamsSingleMessage | ChatParamsMultiMessages;
  path?: never;
  query?: never;
  url: "/chat";
};

export type ChatChatPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ChatChatPostError = ChatChatPostErrors[keyof ChatChatPostErrors];

export type ChatChatPostResponses = {
  /**
   * Successful Response
   */
  200: ChatResponse;
};

export type ChatChatPostResponse =
  ChatChatPostResponses[keyof ChatChatPostResponses];

export type ChatCompletionsChatCompletionsPostData = {
  body: CompletionParams;
  path?: never;
  query?: never;
  url: "/chat/completions";
};

export type ChatCompletionsChatCompletionsPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ChatCompletionsChatCompletionsPostError =
  ChatCompletionsChatCompletionsPostErrors[keyof ChatCompletionsChatCompletionsPostErrors];

export type ChatCompletionsChatCompletionsPostResponses = {
  /**
   * Successful Response
   */
  200: CompletionResponse;
};

export type ChatCompletionsChatCompletionsPostResponse =
  ChatCompletionsChatCompletionsPostResponses[keyof ChatCompletionsChatCompletionsPostResponses];

export type ExecuteExecutePostData = {
  body: ChatParamsSingleMessage | ChatParamsMultiMessages;
  path?: never;
  query?: never;
  url: "/execute";
};

export type ExecuteExecutePostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ExecuteExecutePostError =
  ExecuteExecutePostErrors[keyof ExecuteExecutePostErrors];

export type ExecuteExecutePostResponses = {
  /**
   * Successful Response
   */
  200: ChatResponse;
};

export type ExecuteExecutePostResponse =
  ExecuteExecutePostResponses[keyof ExecuteExecutePostResponses];

export type FeedbackFeedbackPostData = {
  body: FeedbackParams;
  path?: never;
  query?: never;
  url: "/feedback";
};

export type FeedbackFeedbackPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type FeedbackFeedbackPostError =
  FeedbackFeedbackPostErrors[keyof FeedbackFeedbackPostErrors];

export type FeedbackFeedbackPostResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelFeedback;
};

export type FeedbackFeedbackPostResponse =
  FeedbackFeedbackPostResponses[keyof FeedbackFeedbackPostResponses];

export type GetModelsModelsGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/models";
};

export type GetModelsModelsGetResponses = {
  /**
   * Successful Response
   */
  200: ModelResponse;
};

export type GetModelsModelsGetResponse =
  GetModelsModelsGetResponses[keyof GetModelsModelsGetResponses];

export type GetDelegatePayloadAuthDelegatePayloadPostData = {
  body: GetPayloadParams;
  path?: never;
  query?: never;
  url: "/auth/delegate/payload";
};

export type GetDelegatePayloadAuthDelegatePayloadPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetDelegatePayloadAuthDelegatePayloadPostError =
  GetDelegatePayloadAuthDelegatePayloadPostErrors[keyof GetDelegatePayloadAuthDelegatePayloadPostErrors];

export type GetDelegatePayloadAuthDelegatePayloadPostResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelGetPayloadResponse;
};

export type GetDelegatePayloadAuthDelegatePayloadPostResponse =
  GetDelegatePayloadAuthDelegatePayloadPostResponses[keyof GetDelegatePayloadAuthDelegatePayloadPostResponses];

export type LoginDelegateAuthDelegateLoginPostData = {
  body: LoginParams;
  path?: never;
  query?: never;
  url: "/auth/delegate/login";
};

export type LoginDelegateAuthDelegateLoginPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LoginDelegateAuthDelegateLoginPostError =
  LoginDelegateAuthDelegateLoginPostErrors[keyof LoginDelegateAuthDelegateLoginPostErrors];

export type LoginDelegateAuthDelegateLoginPostResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelLoginResponse;
};

export type LoginDelegateAuthDelegateLoginPostResponse =
  LoginDelegateAuthDelegateLoginPostResponses[keyof LoginDelegateAuthDelegateLoginPostResponses];

export type VerifyAuthAuthVerifyGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/verify";
};

export type VerifyAuthAuthVerifyGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelVerifyJwtResponse;
};

export type VerifyAuthAuthVerifyGetResponse =
  VerifyAuthAuthVerifyGetResponses[keyof VerifyAuthAuthVerifyGetResponses];

export type GetUserUserGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/user";
};

export type GetUserUserGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUserResponse;
};

export type GetUserUserGetResponse =
  GetUserUserGetResponses[keyof GetUserUserGetResponses];

export type GetUserWalletsUserWalletsGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/user/wallets";
};

export type GetUserWalletsUserWalletsGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListUserWalletResponse;
};

export type GetUserWalletsUserWalletsGetResponse =
  GetUserWalletsUserWalletsGetResponses[keyof GetUserWalletsUserWalletsGetResponses];

export type DeleteUserWalletUserWalletWalletIdDeleteData = {
  body?: never;
  path: {
    wallet_id: string;
  };
  query?: never;
  url: "/user/wallet/{wallet_id}";
};

export type DeleteUserWalletUserWalletWalletIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteUserWalletUserWalletWalletIdDeleteError =
  DeleteUserWalletUserWalletWalletIdDeleteErrors[keyof DeleteUserWalletUserWalletWalletIdDeleteErrors];

export type DeleteUserWalletUserWalletWalletIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetUserWalletUserWalletWalletIdGetData = {
  body?: never;
  path: {
    wallet_id: string;
  };
  query?: never;
  url: "/user/wallet/{wallet_id}";
};

export type GetUserWalletUserWalletWalletIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetUserWalletUserWalletWalletIdGetError =
  GetUserWalletUserWalletWalletIdGetErrors[keyof GetUserWalletUserWalletWalletIdGetErrors];

export type GetUserWalletUserWalletWalletIdGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUserWalletResponse;
};

export type GetUserWalletUserWalletWalletIdGetResponse =
  GetUserWalletUserWalletWalletIdGetResponses[keyof GetUserWalletUserWalletWalletIdGetResponses];

export type PutUserWalletUserWalletWalletIdPutData = {
  body: UpdateUserWalletParams;
  path: {
    wallet_id: string;
  };
  query?: never;
  url: "/user/wallet/{wallet_id}";
};

export type PutUserWalletUserWalletWalletIdPutErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PutUserWalletUserWalletWalletIdPutError =
  PutUserWalletUserWalletWalletIdPutErrors[keyof PutUserWalletUserWalletWalletIdPutErrors];

export type PutUserWalletUserWalletWalletIdPutResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type PostUserWalletUserWalletPostData = {
  body: CreateUserWalletParams;
  path?: never;
  query?: never;
  url: "/user/wallet";
};

export type PostUserWalletUserWalletPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PostUserWalletUserWalletPostError =
  PostUserWalletUserWalletPostErrors[keyof PostUserWalletUserWalletPostErrors];

export type PostUserWalletUserWalletPostResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetAgentsAgentsGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/agents";
};

export type GetAgentsAgentsGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListAgentListResponse;
};

export type GetAgentsAgentsGetResponse =
  GetAgentsAgentsGetResponses[keyof GetAgentsAgentsGetResponses];

export type DeleteAgentAgentAgentIdDeleteData = {
  body?: never;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}";
};

export type DeleteAgentAgentAgentIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteAgentAgentAgentIdDeleteError =
  DeleteAgentAgentAgentIdDeleteErrors[keyof DeleteAgentAgentAgentIdDeleteErrors];

export type DeleteAgentAgentAgentIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteAgentAgentAgentIdDeleteResponse =
  DeleteAgentAgentAgentIdDeleteResponses[keyof DeleteAgentAgentAgentIdDeleteResponses];

export type GetAgentAgentAgentIdGetData = {
  body?: never;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}";
};

export type GetAgentAgentAgentIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentAgentAgentIdGetError =
  GetAgentAgentAgentIdGetErrors[keyof GetAgentAgentAgentIdGetErrors];

export type GetAgentAgentAgentIdGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentResponse;
};

export type GetAgentAgentAgentIdGetResponse =
  GetAgentAgentAgentIdGetResponses[keyof GetAgentAgentAgentIdGetResponses];

export type UpdateAgentAgentAgentIdPutData = {
  body: UpdateAgentHandlerParams;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}";
};

export type UpdateAgentAgentAgentIdPutErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateAgentAgentAgentIdPutError =
  UpdateAgentAgentAgentIdPutErrors[keyof UpdateAgentAgentAgentIdPutErrors];

export type UpdateAgentAgentAgentIdPutResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentResponse;
};

export type UpdateAgentAgentAgentIdPutResponse =
  UpdateAgentAgentAgentIdPutResponses[keyof UpdateAgentAgentAgentIdPutResponses];

export type CreateAgentAgentPostData = {
  body: CreateAgentHandlerParams;
  path?: never;
  query?: never;
  url: "/agent";
};

export type CreateAgentAgentPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateAgentAgentPostError =
  CreateAgentAgentPostErrors[keyof CreateAgentAgentPostErrors];

export type CreateAgentAgentPostResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentResponse;
};

export type CreateAgentAgentPostResponse =
  CreateAgentAgentPostResponses[keyof CreateAgentAgentPostResponses];

export type DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteData = {
  body?: never;
  path: {
    agent_id: string;
    trigger_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger/{trigger_id}";
};

export type DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteError =
  DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteErrors[keyof DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteErrors];

export type DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteResponse =
  DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteResponses[keyof DeleteAgentTriggerAgentAgentIdTriggerTriggerIdDeleteResponses];

export type GetAgentTriggerAgentAgentIdTriggerTriggerIdGetData = {
  body?: never;
  path: {
    agent_id: string;
    trigger_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger/{trigger_id}";
};

export type GetAgentTriggerAgentAgentIdTriggerTriggerIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentTriggerAgentAgentIdTriggerTriggerIdGetError =
  GetAgentTriggerAgentAgentIdTriggerTriggerIdGetErrors[keyof GetAgentTriggerAgentAgentIdTriggerTriggerIdGetErrors];

export type GetAgentTriggerAgentAgentIdTriggerTriggerIdGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentTriggerResponse;
};

export type GetAgentTriggerAgentAgentIdTriggerTriggerIdGetResponse =
  GetAgentTriggerAgentAgentIdTriggerTriggerIdGetResponses[keyof GetAgentTriggerAgentAgentIdTriggerTriggerIdGetResponses];

export type UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutData = {
  body: UpdateAgentTriggerParams;
  path: {
    agent_id: string;
    trigger_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger/{trigger_id}";
};

export type UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutError =
  UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutErrors[keyof UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutErrors];

export type UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentTriggerResponse;
};

export type UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutResponse =
  UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutResponses[keyof UpdateAgentTriggerAgentAgentIdTriggerTriggerIdPutResponses];

export type CreateAgentTriggerAgentAgentIdTriggerPostData = {
  body: CreateAgentTriggerParams;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger";
};

export type CreateAgentTriggerAgentAgentIdTriggerPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateAgentTriggerAgentAgentIdTriggerPostError =
  CreateAgentTriggerAgentAgentIdTriggerPostErrors[keyof CreateAgentTriggerAgentAgentIdTriggerPostErrors];

export type CreateAgentTriggerAgentAgentIdTriggerPostResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentTriggerResponse;
};

export type CreateAgentTriggerAgentAgentIdTriggerPostResponse =
  CreateAgentTriggerAgentAgentIdTriggerPostResponses[keyof CreateAgentTriggerAgentAgentIdTriggerPostResponses];

export type DeleteAgentToolAgentAgentIdToolToolIdDeleteData = {
  body?: never;
  path: {
    agent_id: string;
    tool_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool/{tool_id}";
};

export type DeleteAgentToolAgentAgentIdToolToolIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteAgentToolAgentAgentIdToolToolIdDeleteError =
  DeleteAgentToolAgentAgentIdToolToolIdDeleteErrors[keyof DeleteAgentToolAgentAgentIdToolToolIdDeleteErrors];

export type DeleteAgentToolAgentAgentIdToolToolIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteAgentToolAgentAgentIdToolToolIdDeleteResponse =
  DeleteAgentToolAgentAgentIdToolToolIdDeleteResponses[keyof DeleteAgentToolAgentAgentIdToolToolIdDeleteResponses];

export type GetAgentToolAgentAgentIdToolToolIdGetData = {
  body?: never;
  path: {
    agent_id: string;
    tool_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool/{tool_id}";
};

export type GetAgentToolAgentAgentIdToolToolIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentToolAgentAgentIdToolToolIdGetError =
  GetAgentToolAgentAgentIdToolToolIdGetErrors[keyof GetAgentToolAgentAgentIdToolToolIdGetErrors];

export type GetAgentToolAgentAgentIdToolToolIdGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentToolResponse;
};

export type GetAgentToolAgentAgentIdToolToolIdGetResponse =
  GetAgentToolAgentAgentIdToolToolIdGetResponses[keyof GetAgentToolAgentAgentIdToolToolIdGetResponses];

export type UpdateAgentToolAgentAgentIdToolToolIdPutData = {
  body: UpdateAgentToolParams;
  path: {
    agent_id: string;
    tool_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool/{tool_id}";
};

export type UpdateAgentToolAgentAgentIdToolToolIdPutErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateAgentToolAgentAgentIdToolToolIdPutError =
  UpdateAgentToolAgentAgentIdToolToolIdPutErrors[keyof UpdateAgentToolAgentAgentIdToolToolIdPutErrors];

export type UpdateAgentToolAgentAgentIdToolToolIdPutResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentToolResponse;
};

export type UpdateAgentToolAgentAgentIdToolToolIdPutResponse =
  UpdateAgentToolAgentAgentIdToolToolIdPutResponses[keyof UpdateAgentToolAgentAgentIdToolToolIdPutResponses];

export type CreateAgentToolAgentAgentIdToolPostData = {
  body: CreateAgentToolParams;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool";
};

export type CreateAgentToolAgentAgentIdToolPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateAgentToolAgentAgentIdToolPostError =
  CreateAgentToolAgentAgentIdToolPostErrors[keyof CreateAgentToolAgentAgentIdToolPostErrors];

export type CreateAgentToolAgentAgentIdToolPostResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentToolResponse;
};

export type CreateAgentToolAgentAgentIdToolPostResponse =
  CreateAgentToolAgentAgentIdToolPostResponses[keyof CreateAgentToolAgentAgentIdToolPostResponses];

export type GetAgentWalletsAgentAgentIdWalletsGetData = {
  body?: never;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/wallets";
};

export type GetAgentWalletsAgentAgentIdWalletsGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentWalletsAgentAgentIdWalletsGetError =
  GetAgentWalletsAgentAgentIdWalletsGetErrors[keyof GetAgentWalletsAgentAgentIdWalletsGetErrors];

export type GetAgentWalletsAgentAgentIdWalletsGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListAgentWalletResponse;
};

export type GetAgentWalletsAgentAgentIdWalletsGetResponse =
  GetAgentWalletsAgentAgentIdWalletsGetResponses[keyof GetAgentWalletsAgentAgentIdWalletsGetResponses];

export type GetAgentWalletAgentAgentIdWalletWalletIdGetData = {
  body?: never;
  path: {
    agent_id: string;
    wallet_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/wallet/{wallet_id}";
};

export type GetAgentWalletAgentAgentIdWalletWalletIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentWalletAgentAgentIdWalletWalletIdGetError =
  GetAgentWalletAgentAgentIdWalletWalletIdGetErrors[keyof GetAgentWalletAgentAgentIdWalletWalletIdGetErrors];

export type GetAgentWalletAgentAgentIdWalletWalletIdGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentWalletResponse;
};

export type GetAgentWalletAgentAgentIdWalletWalletIdGetResponse =
  GetAgentWalletAgentAgentIdWalletWalletIdGetResponses[keyof GetAgentWalletAgentAgentIdWalletWalletIdGetResponses];

export type GetConversationsConversationsGetData = {
  body?: never;
  path?: never;
  query?: {
    agent_id?: string | null;
  };
  url: "/conversations";
};

export type GetConversationsConversationsGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetConversationsConversationsGetError =
  GetConversationsConversationsGetErrors[keyof GetConversationsConversationsGetErrors];

export type GetConversationsConversationsGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListConversationListResponse;
};

export type GetConversationsConversationsGetResponse =
  GetConversationsConversationsGetResponses[keyof GetConversationsConversationsGetResponses];

export type DeleteConversationConversationConversationIdDeleteData = {
  body?: never;
  path: {
    conversation_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}";
};

export type DeleteConversationConversationConversationIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteConversationConversationConversationIdDeleteError =
  DeleteConversationConversationConversationIdDeleteErrors[keyof DeleteConversationConversationConversationIdDeleteErrors];

export type DeleteConversationConversationConversationIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteConversationConversationConversationIdDeleteResponse =
  DeleteConversationConversationConversationIdDeleteResponses[keyof DeleteConversationConversationConversationIdDeleteResponses];

export type GetConversationConversationConversationIdGetData = {
  body?: never;
  path: {
    conversation_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}";
};

export type GetConversationConversationConversationIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetConversationConversationConversationIdGetError =
  GetConversationConversationConversationIdGetErrors[keyof GetConversationConversationConversationIdGetErrors];

export type GetConversationConversationConversationIdGetResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationResponse;
};

export type GetConversationConversationConversationIdGetResponse =
  GetConversationConversationConversationIdGetResponses[keyof GetConversationConversationConversationIdGetResponses];

export type UpdateConversationConversationConversationIdPutData = {
  body: UpdateConversationHandlerParams;
  path: {
    conversation_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}";
};

export type UpdateConversationConversationConversationIdPutErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateConversationConversationConversationIdPutError =
  UpdateConversationConversationConversationIdPutErrors[keyof UpdateConversationConversationConversationIdPutErrors];

export type UpdateConversationConversationConversationIdPutResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationResponse;
};

export type UpdateConversationConversationConversationIdPutResponse =
  UpdateConversationConversationConversationIdPutResponses[keyof UpdateConversationConversationConversationIdPutResponses];

export type CreateConversationConversationPostData = {
  body: CreateConversationHandlerParams;
  path?: never;
  query?: never;
  url: "/conversation";
};

export type CreateConversationConversationPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateConversationConversationPostError =
  CreateConversationConversationPostErrors[keyof CreateConversationConversationPostErrors];

export type CreateConversationConversationPostResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationResponse;
};

export type CreateConversationConversationPostResponse =
  CreateConversationConversationPostResponses[keyof CreateConversationConversationPostResponses];

export type CreateConversationMessageConversationConversationIdMessagePostData =
  {
    body: CreateMessageHandlerParams;
    path: {
      conversation_id: string;
    };
    query?: never;
    url: "/conversation/{conversation_id}/message";
  };

export type CreateConversationMessageConversationConversationIdMessagePostErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError;
  };

export type CreateConversationMessageConversationConversationIdMessagePostError =
  CreateConversationMessageConversationConversationIdMessagePostErrors[keyof CreateConversationMessageConversationConversationIdMessagePostErrors];

export type CreateConversationMessageConversationConversationIdMessagePostResponses =
  {
    /**
     * Successful Response
     */
    200: ResponseModelConversationMessageResponse;
  };

export type CreateConversationMessageConversationConversationIdMessagePostResponse =
  CreateConversationMessageConversationConversationIdMessagePostResponses[keyof CreateConversationMessageConversationConversationIdMessagePostResponses];

export type UpdateConversationMessageConversationConversationIdMessageMessageIdPutData =
  {
    body: UpdateMessageHandlerParams;
    path: {
      conversation_id: string;
      message_id: string;
    };
    query?: never;
    url: "/conversation/{conversation_id}/message/{message_id}";
  };

export type UpdateConversationMessageConversationConversationIdMessageMessageIdPutErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError;
  };

export type UpdateConversationMessageConversationConversationIdMessageMessageIdPutError =
  UpdateConversationMessageConversationConversationIdMessageMessageIdPutErrors[keyof UpdateConversationMessageConversationConversationIdMessageMessageIdPutErrors];

export type UpdateConversationMessageConversationConversationIdMessageMessageIdPutResponses =
  {
    /**
     * Successful Response
     */
    200: ResponseModelConversationMessageResponse;
  };

export type UpdateConversationMessageConversationConversationIdMessageMessageIdPutResponse =
  UpdateConversationMessageConversationConversationIdMessageMessageIdPutResponses[keyof UpdateConversationMessageConversationConversationIdMessageMessageIdPutResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:4242" | (string & {});
};
